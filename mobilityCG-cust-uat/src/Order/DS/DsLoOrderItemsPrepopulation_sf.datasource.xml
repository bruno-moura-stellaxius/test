<Datasource name="DsLoOrderItemsPrepopulation" backendSystem="sf" businessObjectClass="LoOrderItemsPrepopulation" external="true" editableEntity="TmpOrderItemMergeResult_T" schemaVersion="2.0">
  <Attributes>
    <Attribute name="pKey" table="Order_Item__c" column="Id" />
    <Attribute name="sdoMainPKey" table="Order_Item__c" column="Order__c" />
    <Attribute name="sdoItemMetaPKey" table="Order_Item__c" column="Order_Item_Template__c" />
    <Attribute name="sdoParentItemPKey" table="Order_Item__c" column="Parent_Order_Item__c" />
    <Attribute name="quantity" table="Order_Item__c" column="Quantity__c" />
    <Attribute name="discount" table="Order_Item__c" column="Discount__c" />
    <Attribute name="specialPrice" table="Order_Item__c" column="Special_Price__c" />
    <Attribute name="specialPriceReceipt" table="Order_Item__c" column="Special_Price_Receipt__c" />
    <Attribute name="prdMainPKey" table="TmpOrderItemMergeResult_T" column="PrdMainPKey" />
    <Attribute name="text1" table="TmpOrderItemMergeResult_T" column="Text1" />
    <Attribute name="prdId" table="TmpOrderItemMergeResult_T" column="PrdId" />
    <Attribute name="shortId" table="TmpOrderItemMergeResult_T" column="ShortId" />
    <Attribute name="value" table="Order_Item__c" column="Value__c" />
    <Attribute name="valueReceipt" table="Order_Item__c" column="Value_Receipt__c" />
    <Attribute name="type" table="Order_Item_Template__c" column="Description_#Language#__c" />
    <Attribute name="changedBOMType" table="Order_Item__c" column="ChangedBOMType__c" />
    <Attribute name="parentItem" table="Order_Item__c" column="Parent_Order_Item__c" />
    <Attribute name="shortType" table="Order_Item_Template__c" column="Short_Text__c" />
    <Attribute name="promoted" table="TmpOrderItemMergeResult_T" column="Promoted" />
    <Attribute name="listed" table="TmpOrderItemMergeResult_T" column="Listed" />
    <DerivedAttribute name="customerAssortment" value="'0'" />
    <Attribute name="deliveryState" table="TmpOrderItemMergeResult_T" column="DeliveryState" />
    <Attribute name="fieldState" table="TmpOrderItemMergeResult_T" column="FieldState" />
    <Attribute name="simplePricingBasePrice" table="TmpOrderItemMergeResult_T" column="SimplePricingBasePrice" />
    <Attribute name="basePrice" table="Order_Item__c" column="Price__c" />
    <Attribute name="basePriceReceipt" table="Order_Item__c" column="Base_Price__c" />
    <DerivedAttribute name="itemState" value="'L'" />
    <Attribute name="eAN" table="TmpOrderItemMergeResult_T" column="EAN" />
    <Attribute name="newState" table="TmpOrderItemMergeResult_T" column="NewState" />
    <Attribute name="outOfStock" table="TmpOrderItemMergeResult_T" column="OutOfStock" />
    <Attribute name="piecesPerSmallestUnitForBasePrice" table="TmpOrderItemMergeResult_T" column="PiecesPerSmallestUnitForBasePrice" />
    <Attribute name="priceEffect" table="Order_Item_Template__c" column="Price_Effect__c" />
    <Attribute name="price" table="Order_Item__c" column="Price__c" />
    <Attribute name="priceReceipt" table="Order_Item__c" column="Price_Receipt__c" />
    <Attribute name="history" table="TmpOrderItemMergeResult_T" column="History" />
    <Attribute name="groupText" table="TmpOrderItemMergeResult_T" column="GroupText" />
    <Attribute name="groupId" table="TmpOrderItemMergeResult_T" column="GroupId" />
    <Attribute name="saveZeroQuantity" table="Order_Item_Template__c" column="Save_Zero_Quantity__c" />
    <DerivedAttribute name="mergeEngine_invalidated" value="'0'" />
    <DerivedAttribute name="grossValue" value="'0'" />
    <Attribute name="grossValueReceipt" table="Order_Item__c" column="Gross_Value_Receipt__c" />
    <Attribute name="erpId" table="Order_Item__c" column="Erp_Id__c" />
    <DerivedAttribute name="modReason" value="''" />
    <DerivedAttribute name="targetQuantity" value="''" />
    <Attribute name="prdType" table="TmpOrderItemMergeResult_T" column="PrdType" />
    <Attribute name="movementDirection" table="Order_Item_Template__c" column="Movement_Direction__c" />
    <Attribute name="suggestedQuantity" table="TmpOrderItemMergeResult_T" column="SuggestedQuantity" />
    <Attribute name="freeItemCreationStep" table="Order_Item__c" column="Free_Item_Creation_Step__c" />
    <Attribute name="taxClassification" table="TmpOrderItemMergeResult_T" column="TaxClassification" />
    <Attribute name="calculationGroup" table="Order_Item_Template__c" column="Calculation_Group__c" />
    <DerivedAttribute name="deletedFreeItem" value="'0'" />
    <Attribute name="isOrderUnit" table="PrdLogistic" column="IsOrderUnit" />
    <Attribute name="sort" table="PrdLogistic" column="Sort" />
    <Attribute name="category" table="TmpOrderItemMergeResult_T" column="Category" />
    <DerivedAttribute name="refPKey" value="''" />
    <Attribute name="quantityLogisticUnit" table="Unit_Of_Measure__c" column="Unit_Type__c" />
    <Attribute name="piecesPerSmallestUnit" table="Unit_Of_Measure__c" column="Pieces_Per_Smallest_Unit__c" />
    <DerivedAttribute name="myUseStepper" value="'0'" />
    <DerivedAttribute name="mySplit1Q" value="'0'" />
    <DerivedAttribute name="mySplit2Q" value="'0'" />
    <DerivedAttribute name="mySplit3Q" value="'0'" />
    <Attribute name="myQuotaProductId" table="TmpOrderItemMergeResult_T" column="myQuotaProductId" />
    <Attribute name="mySalesRepQuota" table="TmpOrderItemMergeResult_T" column="mySalesRepQuota" />
    <Attribute name="myChannelQuota" table="TmpOrderItemMergeResult_T" column="myChannelQuota" />
    <Attribute name="myCustomerQuota" table="TmpOrderItemMergeResult_T" column="myCustomerQuota" />
    <Attribute name="mySalesRepQuotaCategory" table="TmpOrderItemMergeResult_T" column="mySalesRepQuotaCategory" />
    <Attribute name="myChannelQuotaCategory" table="TmpOrderItemMergeResult_T" column="myChannelQuotaCategory" />
    <Attribute name="myCustomerQuotaCategory" table="TmpOrderItemMergeResult_T" column="myCustomerQuotaCategory" />
    <Attribute name="mySalesRepQuotaValidFrom" table="TmpOrderItemMergeResult_T" column="mySalesRepQuotaValidFrom" />
    <Attribute name="myChannelQuotaValidFrom" table="TmpOrderItemMergeResult_T" column="myChannelQuotaValidFrom" />
    <Attribute name="myCustomerQuotaValidFrom" table="TmpOrderItemMergeResult_T" column="myCustomerQuotaValidFrom" />
    <Attribute name="mySalesRepQuotaValidTo" table="TmpOrderItemMergeResult_T" column="mySalesRepQuotaValidTo" />
    <Attribute name="myChannelQuotaValidTo" table="TmpOrderItemMergeResult_T" column="myChannelQuotaValidTo" />
    <Attribute name="myCustomerQuotaValidTo" table="TmpOrderItemMergeResult_T" column="myCustomerQuotaValidTo" />
    <Attribute name="myUoMDelivery" table="Product2" column="MyUoMDelivery__c" />
    <Attribute name="myBOMType" table="Product2" column="BOMType__c" />
    <Attribute name="myIsBOMPart" table="TmpOrderItemMergeResult_T" column="myIsBOMPart" />
    <Attribute name="myEligibleForExchange" table="Product2" column="EligibleForExchange__c" />
    <Attribute name="myAvailableForExchange" table="Product2" column="AvailableAsExchangeProduct__c" />
    <Attribute name="myPrdDepreciationPercentage" table="Product2" column="Depreciation__c" />
    <Attribute name="myPrdState" table="Product2" column="State__c" />
    <Attribute name="criterion3" table="TmpOrderItemMergeResult_T" column="criterion3" />
    <Attribute name="criterion4" table="TmpOrderItemMergeResult_T" column="criterion4" />
    <Attribute name="notDiscountable" table="Product2" column="notDiscountable" />
    <Attribute name="myItemCatGroup" table="Product2" column="MyItemCatGroup__c" />
    <Attribute name="myAvailableAsSample" table="Product2" column="MyAvailableAsSample__c" />
    <Attribute name="myAvailableAsPersonalUsage" table="Product2" column="MyAvailableAsPersonalUsage__c" />
    <Attribute name="myAvailableAsLoyaltyCard" table="Product2" column="MyAvailableAsLoyaltyCard__c" />
    <Attribute name="myIsTargetProduct" table="TmpOrderItemMergeResult_T" column="MyIsTargetProduct" />
    <DerivedAttribute name="myIsTargetProductImage" value="''" />
    <Attribute name="myShipperPiecesPerSmallestUnit" table="Product2" column="MyShipperPiecesPerSmallestUnit__c" />
    <Attribute name="myPackPiecesPerSmallestUnit" table="Product2" column="MyPackPiecesPerSmallestUnit__c" />
    <Attribute name="myVATCode" table="Product2" column="VATCode__c" />
    <Attribute name="myVATPercentage" table="Product2" column="VATPercentage__c" />
    <Attribute name="myApplyDeliveryUnit" table="Order_Item_Template__c" column="Apply_Delivery_Unit__c" />
    <Attribute name="myDeliveryUnit" table="Product2" column="DeliveryUnit__c" />
    <Attribute name="mySAPCode" table="Product2" column="SAPProductCode__c" />
    <Attribute name="myIsPharmaceutical" table="Product2" column="Pharmaceutical__c" />
    <Attribute name="myIsMedicalDev" table="Product2" column="MedicalDev__c" />
    <Attribute name="myIsFood" table="Product2" column="Food__c" />
    <Attribute name="myIsCosmetics" table="Product2" column="Cosmetics__c" />
    <Attribute name="myIsBiocides" table="Product2" column="Biocides__c" />
    <Attribute name="myIsVeterinary" table="Product2" column="Veterinary__c" />
    <Attribute name="myIsAssortmentProduct" table="Product2" column="myIsAssortmentProduct__c" />
    <Attribute name="myDeliveryValidFrom" table="Product2" column="Delivery_Valid_From__c" />
    <Attribute name="myDeliveryValidThru" table="Product2" column="Delivery_Valid_Thru__c" />
    <Attribute name="myOrderLineType" table="Product2" column="OrderLineType__c" />
    <DerivedAttribute name="mySAPCode" value="CASE WHEN Product2.Consumer_Goods_Product_Code__c LIKE '#SalesOrg#_%' AND LENGTH(Product2.Consumer_Goods_Product_Code__c) IS 23 THEN SUBSTR(Product2.Consumer_Goods_Product_Code__c, 13, 10) ELSE '1' END " />
    <Attribute name="countOverTotalDiscount" table="Order_Item_Template__c" column="CountOverTotalDiscount__c" />
    <Attribute name="oneHundredDiscount" table="Order_Item_Template__c" column="OneHundredDiscount__c" />
    <Attribute name="myCycleBrandPriority" table="TmpOrderItemMergeResult_T" column="myCycleBrandPriority" />
    <Attribute name="myAssortmentOrderType" table="Ordem_Item__c" column="myAssortmentOrderType" />
    <Attribute name="myAssortmentSoldTo" table="Ordem_Item__c" column="myAssortmentSoldTo" />
    <Attribute name="orderItemTemplate" table="Order_Item_Template__c" column="Name" />
  </Attributes>
  <Entities>
    <Entity name="TmpOrderItemMergeResult_T" alias="" idAttribute="PrdMainPKey" />
  </Entities>
  <Database platform="SQLite">
    <Load><![CDATA[
var sqlstmt = "";
var proposedSqlQuery = "";
var selectAttributes = "";
var queryCondition = "";
var isCollection = "";
var isHit = "";
var isNone = "";
var sdoMetaPosition = "";
var presentDefault = "";
var criterionFilterAttribute = "";
var criterionFilterValue = "";
var jsonQuerySelectPromotion = {};
var jsonQueryPersisted = {};
var sdoItemMetaPKey = ""; 
var type = ""; 
var shortType = ""; 
var priceEffect = ""; 
var saveZeroQuantity = ""; 
var calculationGroup = ""; 
var movementDirection = "";
var orderItemTemplate = "";

if (Utils.isDefined(jsonQuery.queryCondition)) {
 queryCondition = Utils.convertForDBParam(jsonQuery.queryCondition, "DomText");
}
if (Utils.isDefined(jsonQuery.isCollection)) {
 isCollection = Utils.convertForDBParam(jsonQuery.isCollection, "DomText");
}
if (Utils.isDefined(jsonQuery.isHit)) {
 isHit = Utils.convertForDBParam(jsonQuery.isHit, "DomText");
}
if (Utils.isDefined(jsonQuery.sdoMetaPosition)) {
 sdoMetaPosition = Utils.convertForDBParam(jsonQuery.sdoMetaPosition, "DomText");
}
if (Utils.isDefined(jsonQuery.presentDefault)) {
 presentDefault = Utils.convertForDBParam(jsonQuery.presentDefault, "DomText");
}
if (Utils.isDefined(jsonQuery.criterionFilterAttribute)) {
 criterionFilterAttribute = Utils.convertForDBParam(jsonQuery.criterionFilterAttribute, "DomText");
}
if (Utils.isDefined(jsonQuery.criterionFilterValue)) {
 criterionFilterValue = Utils.convertForDBParam(jsonQuery.criterionFilterValue, "DomText");
}
if (Utils.isDefined(jsonQuery.jsonQuerySelectPromotion)) {
 jsonQuerySelectPromotion = jsonQuery.jsonQuerySelectPromotion;
}
if (Utils.isDefined(jsonQuery.jsonQueryPersisted)) {
 jsonQueryPersisted = jsonQuery.jsonQueryPersisted;
}
if (Utils.isDefined(jsonQuery.isNone)) {
 isNone = Utils.convertForDBParam(jsonQuery.isNone, "DomText");
}

// From here
if (Utils.isDefined(jsonQuery.mainItemTemplate.getPKey())) {
 sdoItemMetaPKey = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getPKey(), "DomPKey");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getText())) {
 type = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getText(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getShortText())) {
 shortType = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getShortText(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getPriceEffect())) {
 priceEffect = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getPriceEffect(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getSaveZeroQuantity())) {
 saveZeroQuantity = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getSaveZeroQuantity(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getCalculationGroup())) {
 calculationGroup = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getCalculationGroup(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getMovementDirection())) {
 movementDirection = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getMovementDirection(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getMyApplyDeliveryUnit())) {
 myApplyDeliveryUnit = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getMyApplyDeliveryUnit(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getOrderItemTemplate())) {
 orderItemTemplate = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getOrderItemTemplate(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getCountOverTotalDiscount())) {
 countOverTotalDiscount = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getCountOverTotalDiscount(), "DomText");
}
if (Utils.isDefined(jsonQuery.mainItemTemplate.getOneHundredDiscount())) {
 oneHundredDiscount = Utils.convertForDBParam(jsonQuery.mainItemTemplate.getOneHundredDiscount(), "DomText");
}

var sqlParams = {isCollection, isHit,sdoMetaPosition,presentDefault,criterionFilterAttribute,criterionFilterValue,isNone,
                 sdoItemMetaPKey,type,shortType,priceEffect,saveZeroQuantity,calculationGroup,movementDirection,myApplyDeliveryUnit,orderItemTemplate,countOverTotalDiscount,oneHundredDiscount};
var persistedSqlQuery = Facade.myProxy.getLoadStatement("LoMeOrderItems", jsonQueryPersisted);
var selectPromotionSqlQuery = Facade.myProxy.getLoadStatement("LoMeSelectablePromotions", jsonQuerySelectPromotion);

//Select Order Items
selectAttributes += " persistedProduct.pKey AS pKey ";
selectAttributes += " ,IFNULL(proposedProduct.prdMainPKey, persistedProduct.prdMainPKey) AS prdMainPKey ";
selectAttributes += " ,IFNULL(proposedProduct.Listed, persistedProduct.Listed) AS listed ";
selectAttributes += " ,proposedProduct.CustomerProductNumber AS customerProductNumber ";
selectAttributes += " ,proposedProduct.FocusProductType AS focusProductType ";
selectAttributes += " ,CASE WHEN proposedProduct.FocusProductType IS NULL THEN 'EmptyImage' WHEN proposedProduct.FocusProductType = ' ' THEN 'EmptyImage' ELSE 'FocusIcon' END AS focusProductImage ";
selectAttributes += " ,IFNULL(proposedProduct.OutOfStock, persistedProduct.OutOfStock) AS outOfStock ";
selectAttributes += " ,IFNULL(proposedProduct.History, persistedProduct.History) AS history ";
selectAttributes += " ,IFNULL(proposedProduct.Promoted, persistedProduct.Promoted) AS promoted ";
selectAttributes += " ,CASE WHEN proposedProduct.SdoAssortment = '1' THEN  '1' ELSE '0' END AS sdoAssortment ";
selectAttributes += " ,CASE WHEN persistedProduct.IsPersistedItem = '1' THEN  '1' ELSE '0' END AS isPersistedItem ";
selectAttributes += " ,CASE WHEN proposedProduct.Listing = 'Hit' THEN 'Hit' WHEN proposedProduct.Listing = 'None' THEN 'None' ELSE ' ' END AS listing ";
selectAttributes += " ,CASE WHEN proposedProduct.ListingWithModules = 'Hit' THEN 'Hit' WHEN proposedProduct.ListingWithModules  = 'None' THEN 'None' ELSE ' ' END AS listingWithModules ";
selectAttributes += " ,IFNULL(proposedProduct.piecesPerSmallestUnit, persistedProduct.piecesPerSmallestUnit) AS piecesPerSmallestUnit ";
selectAttributes += " ,IFNULL(proposedProduct.promotionPKey, persistedProduct.promotionPKey) AS promotionPKey ";
selectAttributes += " ,IFNULL(proposedProduct.ProductClassifications, '') AS productClassifications ";
selectAttributes += " ,IFNULL(proposedProduct.SpecialPromoted, '') AS specialPromoted ";
selectAttributes += " ,IFNULL(proposedProduct.SpecialQuantity, '') AS specialQuantity ";
selectAttributes += " ,IFNULL(proposedProduct.GroupName, '') AS groupName ";
selectAttributes += " ,IFNULL(proposedProduct.GroupSort, '') AS groupSort ";
selectAttributes += " ,IFNULL(proposedProduct.GroupIdSort, '') AS groupIdSort ";
selectAttributes += " ,IFNULL(proposedProduct.TacticProductPKey, '') AS tacticProductPKey ";
selectAttributes += " ,IFNULL(proposedProduct.sort, persistedProduct.sort) AS sort ";
selectAttributes += " ,proposedProduct.isOrderUnit AS isOrderUnit ";
selectAttributes += " ,proposedProduct.IsConsumerUnit AS isConsumerUnit ";
selectAttributes += " ,proposedProduct.IsPriceUnit AS isPriceUnit ";
selectAttributes += " ,proposedProduct.UnitType AS unitType ";
selectAttributes += " ,IFNULL(proposedProduct.quantityLogisticUnit, persistedProduct.quantityLogisticUnit) AS quantityLogisticUnit ";
selectAttributes += " ,proposedProduct.DefaultQuantityLogisticUnit AS defaultQuantityLogisticUnit ";
selectAttributes += " ,proposedProduct.DefaultPiecesPerSmallestUnit AS defaultPiecesPerSmallestUnit ";
selectAttributes += " ,proposedProduct.Text1 AS text1 ";
selectAttributes += " ,proposedProduct.Text2 AS text2 ";
selectAttributes += " ,proposedProduct.PrdId AS prdId ";
selectAttributes += " ,proposedProduct.ShortId AS shortId ";
selectAttributes += " ,proposedProduct.TaxClassification AS taxClassification ";
selectAttributes += " ,proposedProduct.SimplePricingBasePrice AS simplePricingBasePrice ";
selectAttributes += " ,proposedProduct.DeliveryState AS deliveryState ";
selectAttributes += " ,proposedProduct.FieldState AS fieldState ";
selectAttributes += " ,proposedProduct.ForeignProduct AS foreignProduct ";
selectAttributes += " ,proposedProduct.EAN AS eAN ";
selectAttributes += " ,proposedProduct.NewState AS newState ";
selectAttributes += " ,proposedProduct.PiecesPerSmallestUnitForBasePrice AS piecesPerSmallestUnitForBasePrice ";
selectAttributes += " ,proposedProduct.GroupId AS groupId ";
selectAttributes += " ,proposedProduct.GroupText AS groupText ";
selectAttributes += " ,proposedProduct.myCycleBrandPriority AS myCycleBrandPriority ";
selectAttributes += " ,proposedProduct.Category AS category ";
selectAttributes += " ,proposedProduct.PrdType AS prdType ";
selectAttributes += " ,IFNULL(proposedProduct.PromotedPrice, 0) AS promotedPrice ";
selectAttributes += " ,IFNULL(proposedProduct.DefaultValue, '') AS defaultValue ";
selectAttributes += " ,IFNULL(proposedProduct.MaxValue, '') AS maxValue ";
selectAttributes += " ,CASE  ";
selectAttributes += "   WHEN (proposedProduct.Promoted = '1' OR persistedProduct.Promoted = '1') ";
selectAttributes += "     AND (proposedProduct.Listed = '1' OR persistedProduct.Listed = '1') ";
selectAttributes += "     THEN 'PL' ";
selectAttributes += "   WHEN (proposedProduct.Promoted = '1' OR persistedProduct.Promoted = '1')";
selectAttributes += "     AND (proposedProduct.Listed = '0' OR persistedProduct.Listed = '0') ";
selectAttributes += "     THEN 'P' ";
selectAttributes += "   WHEN (proposedProduct.Promoted = '0' OR persistedProduct.Promoted = '0') ";
selectAttributes += "     AND (proposedProduct.Listed = '1' OR persistedProduct.Listed = '1') ";
selectAttributes += "     THEN 'L' ";
selectAttributes += "   ELSE ' ' ";
selectAttributes += "   END AS itemState ";
selectAttributes += " ,CASE WHEN proposedProduct.prdMainPKey IS NULL THEN '1' ELSE '0' END AS mergeEngine_invalidated ";
selectAttributes += " ,0 AS minStepperValue ";
selectAttributes += " ,'0' AS deletedFreeItem ";
selectAttributes += " ,IFNULL(persistedProduct.sdoParentItemPKey, ' ') AS sdoParentItemPKey ";
selectAttributes += " ,persistedProduct.parentType AS parentType ";
selectAttributes += " ,persistedProduct.quantity AS quantity ";
selectAttributes += " ,persistedProduct.changedBOMType AS changedBOMType ";
selectAttributes += " ,persistedProduct.parentItem AS parentItem ";
selectAttributes += " ,persistedProduct.discount AS discount ";
selectAttributes += " ,persistedProduct.price AS price ";
selectAttributes += " ,persistedProduct.priceReceipt AS priceReceipt ";
selectAttributes += " ,persistedProduct.value AS value ";
selectAttributes += " ,persistedProduct.valueReceipt AS valueReceipt ";
selectAttributes += " ,persistedProduct.basePriceReceipt AS basePriceReceipt ";
selectAttributes += " ,persistedProduct.grossValueReceipt AS grossValueReceipt ";
selectAttributes += " ,persistedProduct.basePrice AS basePrice ";
selectAttributes += " ,persistedProduct.specialPrice AS specialPrice ";
selectAttributes += " ,persistedProduct.specialPriceReceipt AS specialPriceReceipt ";
selectAttributes += " ,persistedProduct.erpId AS erpId ";
selectAttributes += " ,IFNULL(proposedProduct.suggestedQuantity, persistedProduct.suggestedQuantity) AS suggestedQuantity ";
selectAttributes += " ,persistedProduct.freeItemCreationStep AS freeItemCreationStep ";
selectAttributes += " ,persistedProduct.pricingInformation AS pricingInformation ";
selectAttributes += " ,persistedProduct.sdoMainPKey AS sdoMainPKey ";
selectAttributes += " ,IFNULL(persistedProduct.sdoItemMetaPKey, #sdoItemMetaPKey#) AS sdoItemMetaPKey ";
selectAttributes += " ,IFNULL(persistedProduct.priceEffect, #priceEffect#) AS priceEffect ";
selectAttributes += " ,IFNULL(persistedProduct.saveZeroQuantity, #saveZeroQuantity#) AS saveZeroQuantity ";
selectAttributes += " ,IFNULL(persistedProduct.shortType, #shortType#) AS shortType ";
selectAttributes += " ,IFNULL(persistedProduct.type, #type#) AS type ";
selectAttributes += " ,IFNULL(persistedProduct.calculationGroup, #calculationGroup#) AS calculationGroup ";
selectAttributes += " ,IFNULL(persistedProduct.movementDirection, #movementDirection#) AS movementDirection ";
selectAttributes += " ,IFNULL(persistedProduct.rewardPKey, ' ') AS rewardPKey ";
selectAttributes += " ,IFNULL(persistedProduct.orderItemTemplate, #orderItemTemplate#) AS orderItemTemplate ";
selectAttributes += " ,persistedProduct.pricingInfo1 AS pricingInfo1 ";
selectAttributes += " ,persistedProduct.pricingInfo2 AS pricingInfo2 ";
selectAttributes += " ,persistedProduct.pricingInfo3 AS pricingInfo3 ";
selectAttributes += " ,persistedProduct.pricingInfo4 AS pricingInfo4 ";
selectAttributes += " ,persistedProduct.pricingInfo5 AS pricingInfo5 ";
selectAttributes += " ,persistedProduct.pricingInfo6 AS pricingInfo6 ";
selectAttributes += " ,persistedProduct.pricingInfo7 AS pricingInfo7 ";
selectAttributes += " ,persistedProduct.pricingInfo8 AS pricingInfo8 ";
selectAttributes += " ,persistedProduct.pricingInfo9 AS pricingInfo9 ";
selectAttributes += " ,persistedProduct.pricingInfo10 AS pricingInfo10 ";
selectAttributes += " ,persistedProduct.myDiscountA AS myDiscountA ";
selectAttributes += " ,persistedProduct.myDiscountB AS myDiscountB ";
selectAttributes += " ,persistedProduct.myDiscountC AS myDiscountC ";
selectAttributes += " ,persistedProduct.myDiscountD AS myDiscountD ";
selectAttributes += " ,persistedProduct.myDiscountE AS myDiscountE ";
selectAttributes += " ,persistedProduct.myDiscountF AS myDiscountF ";
selectAttributes += " ,persistedProduct.myDiscountG AS myDiscountG ";
selectAttributes += " ,persistedProduct.myDiscountBase AS myDiscountBase ";
selectAttributes += " ,persistedProduct.myDiscountSource AS myDiscountSource ";
selectAttributes += " ,IFNULL(persistedProduct.refPKey, proposedProduct.prdMainPKey || #sdoItemMetaPKey# || proposedProduct.promotionPKey || ' ') AS refPKey ";
selectAttributes += " , '0' as myUseStepper";
selectAttributes += " , proposedProduct.myDeliveryUnit as myDeliveryUnit";
selectAttributes += " , proposedProduct.myQuotaProductId as myQuotaProductId";
selectAttributes += " , IFNULL(proposedProduct.mySalesRepQuota, 'NA') as mySalesRepQuota";
selectAttributes += " , IFNULL(proposedProduct.myChannelQuota, 'NA') as myChannelQuota";
selectAttributes += " , IFNULL(proposedProduct.myCustomerQuota, 'NA') as myCustomerQuota";
selectAttributes += " , IFNULL(proposedProduct.mySalesRepQuotaCategory, ' ') as mySalesRepQuotaCategory";
selectAttributes += " , IFNULL(proposedProduct.myChannelQuotaCategory, ' ') as myChannelQuotaCategory";
selectAttributes += " , IFNULL(proposedProduct.myCustomerQuotaCategory, ' ') as myCustomerQuotaCategory";
selectAttributes += " , IFNULL(proposedProduct.mySalesRepQuotaValidFrom, ' ') as mySalesRepQuotaValidFrom";
selectAttributes += " , IFNULL(proposedProduct.myChannelQuotaValidFrom, ' ') as myChannelQuotaValidFrom";
selectAttributes += " , IFNULL(proposedProduct.myCustomerQuotaValidFrom, ' ') as myCustomerQuotaValidFrom";
selectAttributes += " , IFNULL(proposedProduct.mySalesRepQuotaValidTo, ' ') as mySalesRepQuotaValidTo";
selectAttributes += " , IFNULL(proposedProduct.myChannelQuotaValidTo, ' ') as myChannelQuotaValidTo";
selectAttributes += " , IFNULL(proposedProduct.myCustomerQuotaValidTo, ' ') as myCustomerQuotaValidTo";
selectAttributes += " , proposedProduct.myUoMDelivery as myUoMDelivery";
selectAttributes += " , proposedProduct.criterion3 AS criterion3 ";
selectAttributes += " , proposedProduct.criterion4 AS criterion4 ";
selectAttributes += " , proposedProduct.notDiscountable AS notDiscountable ";
selectAttributes += " , proposedProduct.myBOMType as myBOMType";
selectAttributes += " ,CASE WHEN proposedProduct.myBOMType IS NULL THEN 'EmptyImage' WHEN proposedProduct.myBOMType = ' ' THEN 'EmptyImage' WHEN proposedProduct.myBOMType = 'Physical' THEN 'MySmallCircleBlue' WHEN proposedProduct.myBOMType = 'Virtual' THEN 'MySmallCircleOrange' ELSE 'EmptyImage' END AS myBOMProductImage";
selectAttributes += " ,proposedProduct.myIsBOMPart AS myIsBOMPart ";
selectAttributes += " , proposedProduct.mySubBrandId as mySubBrandId";
selectAttributes += " , proposedProduct.mySubBrandText as mySubBrandText";
selectAttributes += " , proposedProduct.myItemCatGroup as myItemCatGroup";
selectAttributes += " , proposedProduct.myAvailableAsSample as myAvailableAsSample";
selectAttributes += " , proposedProduct.myAvailableAsPersonalUsage as myAvailableAsPersonalUsage";
selectAttributes += " , proposedProduct.myAvailableAsLoyaltyCard as myAvailableAsLoyaltyCard";
selectAttributes += " , proposedProduct.myShipperPiecesPerSmallestUnit as myShipperPiecesPerSmallestUnit";
selectAttributes += " , proposedProduct.myPackPiecesPerSmallestUnit as myPackPiecesPerSmallestUnit";
selectAttributes += " , proposedProduct.myVATPercentage as myVATPercentage";
selectAttributes += " , proposedProduct.mySAPCode as mySAPCode";
selectAttributes += " , proposedProduct.myEligibleForExchange as myEligibleForExchange ";
selectAttributes += " , proposedProduct.myAvailableForExchange as myAvailableForExchange ";
selectAttributes += " , proposedProduct.myPrdDepreciationPercentage as myPrdDepreciationPercentage ";
selectAttributes += " , proposedProduct.myPrdState as myPrdState ";
selectAttributes += " , proposedProduct.myIsTargetProduct as myIsTargetProduct ";
selectAttributes += " , case when proposedProduct.myIsTargetProduct then 'SpecialQuantity' else 'EmptyImage' END as myIsTargetProductImage ";
selectAttributes += " , proposedProduct.myIsPharmaceutical as myIsPharmaceutical";
selectAttributes += " , proposedProduct.myIsMedicalDev as myIsMedicalDev";
selectAttributes += " , proposedProduct.myIsFood as myIsFood";
selectAttributes += " , proposedProduct.myIsCosmetics as myIsCosmetics";
selectAttributes += " , proposedProduct.myIsBiocides as myIsBiocides";
selectAttributes += " , proposedProduct.myIsVeterinary as myIsVeterinary";
selectAttributes += " , IFNULL(persistedProduct.myApplyDeliveryUnit, #myApplyDeliveryUnit#) AS myApplyDeliveryUnit ";
selectAttributes += " , IFNULL(persistedProduct.countOverTotalDiscount, #countOverTotalDiscount#) AS countOverTotalDiscount ";
selectAttributes += " , IFNULL(persistedProduct.oneHundredDiscount, #oneHundredDiscount#) AS oneHundredDiscount ";
selectAttributes += " , proposedProduct.myIsAssortmentProduct as myIsAssortmentProduct";
selectAttributes += " , proposedProduct.myDeliveryValidFrom as myDeliveryValidFrom";
selectAttributes += " , proposedProduct.myDeliveryValidThru as myDeliveryValidThru";
selectAttributes += " , proposedProduct.myOrderLineType as myOrderLineType";
selectAttributes += " , proposedProduct.myDirectMinQuantity as myDirectMinQuantity";
selectAttributes += " , proposedProduct.myTransferMinQuantity as myTransferMinQuantity";
selectAttributes += " , proposedProduct.mySAPCode as mySAPCode";
selectAttributes += " , proposedProduct.myProductOrderItemCode as myProductOrderItemCode";
selectAttributes += " , proposedProduct.myAssortmentOrderType as myAssortmentOrderType";
selectAttributes += " , proposedProduct.myAssortmentSoldTo as myAssortmentSoldTo";

//Select relevant data from UoM table
proposedSqlQuery += "SELECT proposedProductWithoutUoM.PrdMainPKey AS prdMainPKey ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.Listed = '1' THEN  '1' ELSE '0' END AS listed ";
proposedSqlQuery += " ,proposedProductWithoutUoM.CustomerProductNumber AS customerProductNumber ";
proposedSqlQuery += " ,proposedProductWithoutUoM.FocusProductType AS focusProductType ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.FocusProductType IS NULL THEN 'EmptyImage' WHEN proposedProductWithoutUoM.FocusProductType = ' ' THEN 'EmptyImage' ELSE 'FocusIcon' END AS focusProductImage ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.OutOfStock = '1' THEN  '1' ELSE '0' END AS outOfStock ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.History = '1' THEN  '1' ELSE '0' END AS history ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.Promoted = '1' THEN  '1' ELSE '0' END AS promoted ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.SdoAssortment = '1' THEN  '1' ELSE '0' END AS sdoAssortment ";
proposedSqlQuery += " ,UnitOfMeasure.Pieces_Per_Smallest_Unit__c AS piecesPerSmallestUnit ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.PromotionPKey, ' ') AS promotionPKey ";
proposedSqlQuery += " ,proposedProductWithoutUoM.ProductClassifications AS productClassifications ";
proposedSqlQuery += " ,proposedProductWithoutUoM.SpecialPromoted AS specialPromoted ";
proposedSqlQuery += " ,proposedProductWithoutUoM.SpecialQuantity AS specialQuantity ";
proposedSqlQuery += " ,proposedProductWithoutUoM.SuggestedQuantity AS suggestedQuantity ";
proposedSqlQuery += " ,proposedProductWithoutUoM.GroupName AS groupName ";
proposedSqlQuery += " ,proposedProductWithoutUoM.GroupSort AS groupSort ";
proposedSqlQuery += " ,proposedProductWithoutUoM.GroupIdSort AS groupIdSort ";
proposedSqlQuery += " ,proposedProductWithoutUoM.TacticProductPKey AS tacticProductPKey ";
proposedSqlQuery += " ,UnitOfMeasure.Sort__c AS sort ";
proposedSqlQuery += " ,UnitOfMeasure.Is_Order_Unit__c AS isOrderUnit ";
proposedSqlQuery += " ,UnitOfMeasure.Is_Consumer_Unit__c AS isConsumerUnit ";
proposedSqlQuery += " ,UnitOfMeasure.Is_Price_Unit__c AS isPriceUnit ";
proposedSqlQuery += " ,UnitOfMeasure.Unit_Type__c AS unitType ";
proposedSqlQuery += " ,UnitOfMeasure.Unit_Type__c AS quantityLogisticUnit ";
proposedSqlQuery += " ,proposedProductWithoutUoM.DefaultQuantityLogisticUnit AS defaultQuantityLogisticUnit ";
proposedSqlQuery += " ,proposedProductWithoutUoM.DefaultPiecesPerSmallestUnit AS defaultPiecesPerSmallestUnit ";
proposedSqlQuery += " ,proposedProductWithoutUoM.Text1 AS text1 ";
proposedSqlQuery += " ,proposedProductWithoutUoM.Text2 AS text2 ";
proposedSqlQuery += " ,proposedProductWithoutUoM.PrdId AS prdId ";
proposedSqlQuery += " ,proposedProductWithoutUoM.ShortId AS shortId ";
proposedSqlQuery += " ,proposedProductWithoutUoM.TaxClassification AS taxClassification ";
proposedSqlQuery += " ,proposedProductWithoutUoM.SimplePricingBasePrice AS simplePricingBasePrice ";
proposedSqlQuery += " ,proposedProductWithoutUoM.DeliveryState AS deliveryState ";
proposedSqlQuery += " ,proposedProductWithoutUoM.FieldState AS fieldState ";
proposedSqlQuery += " ,proposedProductWithoutUoM.ForeignProduct AS foreignProduct ";
proposedSqlQuery += " ,proposedProductWithoutUoM.EAN AS eAN ";
proposedSqlQuery += " ,proposedProductWithoutUoM.NewState AS newState ";
proposedSqlQuery += " ,proposedProductWithoutUoM.PiecesPerSmallestUnitForBasePrice AS piecesPerSmallestUnitForBasePrice ";
proposedSqlQuery += " ,proposedProductWithoutUoM.GroupId AS groupId ";
proposedSqlQuery += " ,proposedProductWithoutUoM.GroupText AS groupText ";
proposedSqlQuery += " ,proposedProductWithoutUoM.myCycleBrandPriority AS myCycleBrandPriority ";
proposedSqlQuery += " ,proposedProductWithoutUoM.Category AS category ";
proposedSqlQuery += " ,proposedProductWithoutUoM.PrdType AS prdType ";
proposedSqlQuery += " ,proposedProductWithoutUoM.PromotedPrice AS promotedPrice ";
proposedSqlQuery += " ,proposedProductWithoutUoM.DefaultValue AS defaultValue ";
proposedSqlQuery += " ,proposedProductWithoutUoM.MaxValue AS maxValue ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.Listing = 'Hit' THEN 'Hit' WHEN proposedProductWithoutUoM.Listing = 'None' THEN 'None' ELSE ' ' END AS listing ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.ListingWithModules = 'Hit' THEN 'Hit' WHEN proposedProductWithoutUoM.ListingWithModules  = 'None' THEN 'None' ELSE ' ' END AS listingWithModules ";
proposedSqlQuery += " ,proposedProductWithoutUoM.selectablePromoted as selectablePromoted ";
proposedSqlQuery += " ,' ' as sdoParentItemPKey ";
proposedSqlQuery += " ,proposedProductWithoutUoM.myDeliveryUnit as myDeliveryUnit ";
proposedSqlQuery += " ,proposedProductWithoutUoM.myQuotaProductId as myQuotaProductId ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.mySalesRepQuota, 'NA') as mySalesRepQuota ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.myChannelQuota, 'NA') as myChannelQuota ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.myCustomerQuota, 'NA') as myCustomerQuota ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.mySalesRepQuotaCategory, ' ') as mySalesRepQuotaCategory ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.myChannelQuotaCategory, ' ') as myChannelQuotaCategory ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.myCustomerQuotaCategory, ' ') as myCustomerQuotaCategory ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.mySalesRepQuotaValidFrom, ' ') as mySalesRepQuotaValidFrom ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.myChannelQuotaValidFrom, ' ') as myChannelQuotaValidFrom ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.myCustomerQuotaValidFrom, ' ') as myCustomerQuotaValidFrom ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.mySalesRepQuotaValidTo, ' ') as mySalesRepQuotaValidTo ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.myChannelQuotaValidTo, ' ') as myChannelQuotaValidTo ";
proposedSqlQuery += " ,IFNULL(proposedProductWithoutUoM.myCustomerQuotaValidTo, ' ') as myCustomerQuotaValidTo ";
proposedSqlQuery += " ,proposedProductWithoutUoM.myUoMDelivery as myUoMDelivery ";
proposedSqlQuery += " ,proposedProductWithoutUoM.criterion3 AS criterion3 ";
proposedSqlQuery += " ,proposedProductWithoutUoM.criterion4 AS criterion4 ";
proposedSqlQuery += " ,proposedProductWithoutUoM.notDiscountable AS notDiscountable ";
//proposedSqlQuery += " ,proposedProductWithoutUoM.myIsBOM as myIsBOM ";
proposedSqlQuery += " ,proposedProductWithoutUoM.myBOMType as myBOMType ";
proposedSqlQuery += " ,CASE WHEN proposedProductWithoutUoM.myBOMType IS NULL THEN 'EmptyImage' WHEN proposedProductWithoutUoM.myBOMType = ' ' THEN 'EmptyImage' WHEN proposedProductWithoutUoM.myBOMType = 'Physical' THEN 'MySmallCircleBlue' WHEN proposedProductWithoutUoM.myBOMType = 'Virtual' THEN 'MySmallCircleOrange' ELSE 'EmptyImage' END AS myBOMProductImage";
proposedSqlQuery += " ,proposedProductWithoutUoM.myIsBOMPart AS myIsBOMPart ";
proposedSqlQuery += " ,proposedProductWithoutUoM.mySubBrandId as mySubBrandId ";
proposedSqlQuery += " ,proposedProductWithoutUoM.mySubBrandText as mySubBrandText ";
proposedSqlQuery += " ,proposedProductWithoutUoM.myItemCatGroup as myItemCatGroup ";
proposedSqlQuery += " ,proposedProductWithoutUoM.myAvailableAsSample as myAvailableAsSample";
proposedSqlQuery += " ,proposedProductWithoutUoM.myAvailableAsPersonalUsage as myAvailableAsPersonalUsage";
proposedSqlQuery += " ,proposedProductWithoutUoM.myAvailableAsLoyaltyCard as myAvailableAsLoyaltyCard";
proposedSqlQuery += " ,proposedProductWithoutUoM.myShipperPiecesPerSmallestUnit as myShipperPiecesPerSmallestUnit ";
proposedSqlQuery += " ,proposedProductWithoutUoM.myPackPiecesPerSmallestUnit as myPackPiecesPerSmallestUnit ";
proposedSqlQuery += " , proposedProductWithoutUoM.myVATPercentage as myVATPercentage";
proposedSqlQuery += " , proposedProductWithoutUoM.mySAPCode as mySAPCode";
proposedSqlQuery += " , proposedProductWithoutUoM.myEligibleForExchange as myEligibleForExchange ";
proposedSqlQuery += " , proposedProductWithoutUoM.myAvailableForExchange as myAvailableForExchange ";
proposedSqlQuery += " , proposedProductWithoutUoM.myPrdDepreciationPercentage as myPrdDepreciationPercentage ";
proposedSqlQuery += " , proposedProductWithoutUoM.myPrdState as myPrdState ";
proposedSqlQuery += " , proposedProductWithoutUoM.myIsTargetProduct as myIsTargetProduct ";
selectAttributes += " , case when proposedProduct.myIsTargetProduct then 'SpecialQuantity' else 'EmptyImage' END as myIsTargetProductImage ";
proposedSqlQuery += " , proposedProductWithoutUoM.myIsPharmaceutical as myIsPharmaceutical";
proposedSqlQuery += " , proposedProductWithoutUoM.myIsMedicalDev as myIsMedicalDev";
proposedSqlQuery += " , proposedProductWithoutUoM.myIsFood as myIsFood";
proposedSqlQuery += " , proposedProductWithoutUoM.myIsCosmetics as myIsCosmetics";
proposedSqlQuery += " , proposedProductWithoutUoM.myIsBiocides as myIsBiocides";
proposedSqlQuery += " , proposedProductWithoutUoM.myIsVeterinary as myIsVeterinary";
proposedSqlQuery += " , proposedProductWithoutUoM.myIsAssortmentProduct as myIsAssortmentProduct";
proposedSqlQuery += " , proposedProductWithoutUoM.myDeliveryValidFrom as myDeliveryValidFrom";
proposedSqlQuery += " , proposedProductWithoutUoM.myDeliveryValidThru as myDeliveryValidThru";
proposedSqlQuery += " , proposedProductWithoutUoM.myOrderLineType as myOrderLineType";
proposedSqlQuery += " , proposedProductWithoutUoM.myDirectMinQuantity as myDirectMinQuantity";
proposedSqlQuery += " , proposedProductWithoutUoM.myTransferMinQuantity as myTransferMinQuantity";
proposedSqlQuery += " , proposedProductWithoutUoM.myProductOrderItemCode as myProductOrderItemCode";
proposedSqlQuery += " , proposedProductWithoutUoM.myAssortmentOrderType as myAssortmentOrderType";
proposedSqlQuery += " , proposedProductWithoutUoM.myAssortmentSoldTo as myAssortmentSoldTo";

proposedSqlQuery += " FROM ( ";

//Select data from Temporary Table
proposedSqlQuery += "SELECT TmpOrderItemMergeResult_T.PrdMainPKey AS prdMainPKey ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.Listed = '1' THEN  '1' ELSE '0' END AS listed ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.CustomerProductNumber AS customerProductNumber ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.FocusProductType AS focusProductType ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.FocusProductType IS NULL THEN 'EmptyImage' WHEN TmpOrderItemMergeResult_T.FocusProductType = ' ' THEN 'EmptyImage' ELSE 'FocusIcon' END AS focusProductImage ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.OutOfStock = '1' THEN  '1' ELSE '0' END AS outOfStock ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.History = '1' THEN  '1' ELSE '0' END AS history ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.Promoted = '1' THEN  '1' ELSE '0' END AS promoted ";
proposedSqlQuery += " ,'0' AS selectablePromoted ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.SdoAssortment = '1' THEN  '1' ELSE '0' END AS sdoAssortment ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.PromotionPKey, ' ') AS promotionPKey ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.ProductClassifications AS productClassifications ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.SpecialPromoted AS specialPromoted ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.SpecialQuantity AS specialQuantity ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.SuggestedQuantity AS suggestedQuantity ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.GroupName AS groupName ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.GroupSort AS groupSort ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.GroupIdSort AS groupIdSort ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.TacticProductPKey AS tacticProductPKey ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.DefaultQuantityLogisticUnit AS defaultQuantityLogisticUnit ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.DefaultPiecesPerSmallestUnit AS defaultPiecesPerSmallestUnit ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.Text1 AS text1 ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.Text2 AS text2 ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.PrdId AS prdId ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.ShortId AS shortId ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.TaxClassification AS taxClassification ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.SimplePricingBasePrice AS simplePricingBasePrice ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.DeliveryState AS deliveryState ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.FieldState AS fieldState ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.ForeignProduct AS foreignProduct ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.EAN AS eAN ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.NewState AS newState ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.PiecesPerSmallestUnitForBasePrice AS piecesPerSmallestUnitForBasePrice ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.GroupId AS groupId ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.GroupText AS groupText ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.myCycleBrandPriority AS myCycleBrandPriority ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.Category AS category ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.PrdType AS prdType ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.Listing = 'Hit' THEN 'Hit' WHEN TmpOrderItemMergeResult_T.Listing = 'None' THEN 'None' ELSE ' ' END AS listing ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.ListingWithModules = 'Hit' THEN 'Hit' WHEN TmpOrderItemMergeResult_T.ListingWithModules  = 'None' THEN 'None' ELSE ' ' END AS listingWithModules ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.PromotedPrice AS promotedPrice ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.DefaultValue AS defaultValue ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MaxValue AS maxValue ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.myDeliveryUnit AS myDeliveryUnit ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.myQuotaProductId AS myQuotaProductId ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MySalesRepQuota, 'NA') AS mySalesRepQuota ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MyChannelQuota, 'NA') AS myChannelQuota ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MyCustomerQuota, 'NA') AS myCustomerQuota ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MySalesRepQuotaCategory, ' ') AS mySalesRepQuotaCategory ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MyChannelQuotaCategory, ' ') AS myChannelQuotaCategory ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MyCustomerQuotaCategory, ' ') AS myCustomerQuotaCategory ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MySalesRepQuotaValidFrom, ' ') AS mySalesRepQuotaValidFrom ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MyChannelQuotaValidFrom, ' ') AS myChannelQuotaValidFrom ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MyCustomerQuotaValidFrom, ' ') AS myCustomerQuotaValidFrom ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MySalesRepQuotaValidTo, ' ') AS mySalesRepQuotaValidTo ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MyChannelQuotaValidTo, ' ') AS myChannelQuotaValidTo ";
proposedSqlQuery += " ,IFNULL(TmpOrderItemMergeResult_T.MyCustomerQuotaValidTo, ' ') AS myCustomerQuotaValidTo ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MyUoMDelivery AS myUoMDelivery ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.criterion3 AS criterion3 ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.criterion4 AS criterion4 ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.notDiscountable AS notDiscountable ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.myBOMType AS myBOMType ";
proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.myBOMType IS NULL THEN 'EmptyImage' WHEN TmpOrderItemMergeResult_T.myBOMType = ' ' THEN 'EmptyImage' WHEN TmpOrderItemMergeResult_T.myBOMType = 'Physical' THEN 'MySmallCircleBlue' WHEN TmpOrderItemMergeResult_T.myBOMType = 'Virtual' THEN 'MySmallCircleOrange' ELSE 'EmptyImage' END AS myBOMProductImage";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.myIsBOMPart AS myIsBOMPart ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MySubBrandId AS mySubBrandId ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MySubBrandText AS mySubBrandText ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MyItemCatGroup AS myItemCatGroup ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MyAvailableAsSample as MyAvailableAsSample";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MyAvailableAsPersonalUsage as MyAvailableAsPersonalUsage";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MyAvailableAsLoyaltyCard as MyAvailableAsLoyaltyCard";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MyShipperPiecesPerSmallestUnit AS myShipperPiecesPerSmallestUnit ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.MyPackPiecesPerSmallestUnit AS MyPackPiecesPerSmallestUnit ";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myVATPercentage as myVATPercentage";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.mySAPCode as mySAPCode";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.MyEligibleForExchange as myEligibleForExchange ";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.MyAvailableForExchange as myAvailableForExchange ";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myPrdDepreciationPercentage as myPrdDepreciationPercentage ";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myPrdState as myPrdState ";
proposedSqlQuery += " ,TmpOrderItemMergeResult_T.myIsTargetProduct AS myIsTargetProduct ";
selectAttributes += " , case when proposedProduct.myIsTargetProduct then 'SpecialQuantity' else 'EmptyImage' END as myIsTargetProductImage ";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myIsPharmaceutical as myIsPharmaceutical";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myIsMedicalDev as myIsMedicalDev";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myIsFood as myIsFood";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myIsCosmetics as myIsCosmetics";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myIsBiocides as myIsBiocides";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myIsVeterinary as myIsVeterinary";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myIsAssortmentProduct as myIsAssortmentProduct";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myDeliveryValidFrom as myDeliveryValidFrom";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myDeliveryValidThru as myDeliveryValidThru";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myOrderLineType as myOrderLineType";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myDirectMinQuantity as myDirectMinQuantity";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myTransferMinQuantity as myTransferMinQuantity";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myProductOrderItemCode as myProductOrderItemCode";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myAssortmentOrderType as myAssortmentOrderType";
proposedSqlQuery += " , TmpOrderItemMergeResult_T.myAssortmentSoldTo as myAssortmentSoldTo";

proposedSqlQuery += " FROM TmpOrderItemMergeResult_T ";

if(jsonQuerySelectPromotion.considerSelectablePromotion == "1"){
  proposedSqlQuery += " UNION ";

  //Select data from Selectable Promotions
  proposedSqlQuery += "SELECT selectablePromotion.prdMainPKey AS prdMainPKey ";
  proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.Listed = '1' THEN  '1' ELSE '0' END AS listed ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.CustomerProductNumber AS customerProductNumber ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.FocusProductType AS focusProductType ";
  proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.FocusProductType IS NULL THEN 'EmptyImage' WHEN TmpOrderItemMergeResult_T.FocusProductType = ' ' THEN 'EmptyImage' ELSE 'FocusIcon' END AS focusProductImage ";
  proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.OutOfStock = '1' THEN  '1' ELSE '0' END AS outOfStock ";
  proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.History = '1' THEN  '1' ELSE '0' END AS history ";
  proposedSqlQuery += " ,'1' AS promoted ";
  proposedSqlQuery += " ,'1' AS selectablePromoted ";
  proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.SdoAssortment = '1' THEN  '1' ELSE '0' END AS sdoAssortment ";
  proposedSqlQuery += " ,IFNULL(selectablePromotion.promotionPKey, ' ') AS promotionPKey ";
  proposedSqlQuery += " ,selectablePromotion.productClassifications AS productClassifications ";
  proposedSqlQuery += " ,selectablePromotion.specialPromoted AS specialPromoted ";
  proposedSqlQuery += " ,selectablePromotion.specialQuantity AS specialQuantity ";
  proposedSqlQuery += " ,selectablePromotion.suggestedQuantity AS suggestedQuantity ";
  proposedSqlQuery += " ,selectablePromotion.groupName AS groupName ";
  proposedSqlQuery += " ,selectablePromotion.groupSort AS groupSort ";
  proposedSqlQuery += " ,selectablePromotion.groupIdSort AS groupIdSort ";
  proposedSqlQuery += " ,selectablePromotion.tacticProductPKey AS tacticProductPKey ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.DefaultQuantityLogisticUnit AS defaultQuantityLogisticUnit ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.DefaultPiecesPerSmallestUnit AS defaultPiecesPerSmallestUnit ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.Text1 AS text1 ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.Text2 AS text2 ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.PrdId AS prdId ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.ShortId AS shortId ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.TaxClassification AS taxClassification ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.SimplePricingBasePrice AS simplePricingBasePrice ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.DeliveryState AS deliveryState ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.FieldState AS fieldState ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.ForeignProduct AS foreignProduct ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.EAN AS eAN ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.NewState AS newState ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.PiecesPerSmallestUnitForBasePrice AS piecesPerSmallestUnitForBasePrice ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.GroupId AS groupId ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.GroupText AS groupText ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.myCycleBrandPriority AS myCycleBrandPriority ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.Category AS category ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.PrdType AS prdType ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.changedBOMType AS changedBOMType ";
  proposedSqlQuery += " ,TmpOrderItemMergeResult_T.parentItem AS parentItem ";
  proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.Listing = 'Hit' THEN 'Hit' WHEN TmpOrderItemMergeResult_T.Listing = 'None' THEN 'None' ELSE ' ' END AS listing ";
  proposedSqlQuery += " ,CASE WHEN TmpOrderItemMergeResult_T.ListingWithModules = 'Hit' THEN 'Hit' WHEN TmpOrderItemMergeResult_T.ListingWithModules  = 'None' THEN 'None' ELSE ' ' END AS listingWithModules ";
  proposedSqlQuery += " ,selectablePromotion.promotedPrice AS promotedPrice ";
  proposedSqlQuery += " ,selectablePromotion.defaultValue AS defaultValue ";
  proposedSqlQuery += " ,selectablePromotion.maxValue AS maxValue ";
  proposedSqlQuery += " FROM ( ";
  proposedSqlQuery +=     selectPromotionSqlQuery.sql;
  proposedSqlQuery += "    ) AS selectablePromotion INNER JOIN TmpOrderItemMergeResult_T ON selectablePromotion.prdMainPKey = TmpOrderItemMergeResult_T.PrdMainPKey ";
}
proposedSqlQuery += " ) AS proposedProductWithoutUoM ";
proposedSqlQuery += " INNER JOIN Unit_Of_Measure__c AS UnitOfMeasure ON proposedProductWithoutUOM.prdMainPKey = UnitOfMeasure.Product__c AND UnitOfMeasure.Order_Ability__c = '1' ";


sqlstmt += " WITH proposedProduct AS ( ";
sqlstmt += proposedSqlQuery;
sqlstmt += " ), ";
sqlstmt += " persistedProduct AS ( ";
sqlstmt += persistedSqlQuery.sql;
sqlstmt += " ) ";
sqlstmt += " SELECT ";
sqlstmt += selectAttributes;
sqlstmt += " FROM proposedProduct ";
sqlstmt += " LEFT OUTER JOIN persistedProduct ON ";
sqlstmt += " proposedProduct.prdMainPKey = persistedProduct.prdMainPKey ";
sqlstmt += " AND proposedProduct.promotionPKey = persistedProduct.promotionPKey ";
sqlstmt += " AND proposedProduct.quantityLogisticUnit = persistedProduct.quantityLogisticUnit ";
sqlstmt += " AND persistedProduct.sdoItemMetaPKey = #sdoItemMetaPKey# ";
sqlstmt += " WHERE ";
sqlstmt += queryCondition;
sqlstmt += " UNION ";
sqlstmt += " SELECT ";
sqlstmt += selectAttributes;
sqlstmt += " FROM persistedProduct ";
sqlstmt += " LEFT OUTER JOIN proposedProduct ON ";
sqlstmt += " proposedProduct.prdMainPKey = persistedProduct.prdMainPKey ";
sqlstmt += " AND proposedProduct.promotionPKey = persistedProduct.promotionPKey ";
sqlstmt += " AND proposedProduct.quantityLogisticUnit = persistedProduct.quantityLogisticUnit ";
sqlstmt += " WHERE proposedProduct.prdMainPKey IS NULL ";
sqlstmt += " OR persistedProduct.sdoItemMetaPKey <> #sdoItemMetaPKey# ";
sqlstmt += " ORDER BY refPKey ASC, ";
sqlstmt += " sdoParentItemPKey ASC, ";
sqlstmt += " isOrderUnit DESC, ";
sqlstmt += " sort ASC ";

      var sqlStmtResult = Utils.replaceMacrosParam(sqlstmt, sqlParams);
      //var finalParams = persistedSqlQuery.params.concat(sqlStmtResult.params);

      var finalParams; 
      if(jsonQuerySelectPromotion.considerSelectablePromotion == "1"){
        finalParams=selectPromotionSqlQuery.params.concat(persistedSqlQuery.params).concat(sqlStmtResult.params);
      }else{
        finalParams=persistedSqlQuery.params.concat(sqlStmtResult.params);
      }

      return {sql: sqlStmtResult.sql, params: finalParams};
     ]]></Load>
  </Database>
</Datasource>