<DataSource name="DsLoMyBOMProductParts" backendSystem="sf" businessObjectClass="LoMyBOMProductParts" editableEntity="Product_Part__c" external="true" readOnly="true" distinct="true" schemaVersion="2.0">
  <Attributes>
    <Attribute name="pKey"  />
	<Attribute name="prdKey" />
    <Attribute name="prdName" />
	<Attribute name="prdQuantity"  />
	<Attribute name="parentPrdKey" />
	<Attribute name="childPrdKey" />
  </Attributes>
  <Database platform="SQLite">
    <Load><![CDATA[

			var customerPKey = "";
			var productPKey = "";
			var myBOMType = "";
			if(Utils.isDefined(jsonQuery.customerPKey)){
				customerPKey = Utils.convertForDBParam(jsonQuery.customerPKey, "DomPKey");
			}
			if(Utils.isDefined(jsonQuery.productPKey)){
				productPKey = Utils.convertForDBParam(jsonQuery.productPKey, "DomPKey");
			}
			if(Utils.isDefined(jsonQuery.myBOMType)){
				myBOMType = Utils.convertForDBParam(jsonQuery.myBOMType, "DomString");
			}

			var sqlParams = {customerPKey, productPKey,myBOMType};

			//var sqlStmt  = "SELECT Product_Part__c.Id,Product2.Id AS prdKey, Product2.Name AS prdName";
			//sqlStmt += " , Product_Part__c.Quantity__c AS prdQuantity ";
			//sqlStmt += " FROM Product_Part__c";
			//sqlStmt += " JOIN Product2  ON Product_Part__c.Child_Product__c = Product2.Id ";
			//sqlStmt += " WHERE Product_Part__c.Parent_Product__c = #productPKey# ";
			var sqlStmt = "WITH RECURSIVE ProductHierarchy AS (";
			//sqlStmt += "    -- Base case: Start with the direct children of the given productPKey";
			sqlStmt += "    SELECT ";
			sqlStmt += "        Product_Part__c.Id AS pKey,";
			sqlStmt += "        Product2.Id AS prdKey,";
			sqlStmt += "        Product2.Name AS prdName,";
			sqlStmt += "        Product_Part__c.Quantity__c AS prdQuantity,";
			sqlStmt += "        Product_Part__c.Quantity__c AS prdDefaultQuantity,";
			sqlStmt += "        Product_Part__c.Parent_Product__c AS parentPrdKey,";
			sqlStmt += "        Product_Part__c.Child_Product__c AS childPrdKey";
			sqlStmt += "        , (select BOMType__c from Product2 where Product2.Id = Product_Part__c.Parent_Product__c) AS myParentBOMType ";
			sqlStmt += "    FROM ";
			sqlStmt += "        Product_Part__c";
			sqlStmt += "    JOIN ";
			sqlStmt += "        Product2 ON Product_Part__c.Child_Product__c = Product2.Id";
			sqlStmt += "    WHERE ";
			sqlStmt += "        Product_Part__c.Parent_Product__c = #productPKey#";
			sqlStmt += "    UNION ALL";
			//sqlStmt += "    -- Recursive case: Find children of the current level products";
			sqlStmt += "    SELECT ";
			sqlStmt += "        Product_Part__c.Id AS pKey,";
			sqlStmt += "        Product2.Id AS prdKey,";
			sqlStmt += "        Product2.Name AS prdName,";
			sqlStmt += "        Product_Part__c.Quantity__c AS prdDefaultQuantity,";
			sqlStmt += "        Product_Part__c.Quantity__c AS prdQuantity,";
			sqlStmt += "        Product_Part__c.Parent_Product__c AS parentPrdKey,";
			sqlStmt += "        Product_Part__c.Child_Product__c AS childPrdKey";
			sqlStmt += "        , (select BOMType__c from Product2 where Product2.Id = Product_Part__c.Parent_Product__c) AS myParentBOMType ";
			sqlStmt += "    FROM ";
			sqlStmt += "        Product_Part__c";
			sqlStmt += "    JOIN ";
			sqlStmt += "        Product2 ON Product_Part__c.Child_Product__c = Product2.Id";
			sqlStmt += "    JOIN ";
			sqlStmt += "        ProductHierarchy ON Product_Part__c.Parent_Product__c = ProductHierarchy.childPrdKey";
			sqlStmt += ")";
			sqlStmt += "";
			//sqlStmt += "-- Select from the CTE to get the full hierarchy";
			sqlStmt += "SELECT ";
			sqlStmt += "    pKey,";
			sqlStmt += "    prdKey,";
			sqlStmt += "    prdName,";
			sqlStmt += "    prdQuantity,";
			sqlStmt += "    prdDefaultQuantity,";
			sqlStmt += "    parentPrdKey,";
			sqlStmt += "    childPrdKey ";
			sqlStmt += "    , myParentBOMType ";
			sqlStmt += "FROM ";
			sqlStmt += "    ProductHierarchy ";


			return Utils.replaceMacrosParam(sqlStmt, sqlParams);
		]]></Load>
    <Update><![CDATA[
			// Read only datasource
			return undefined;
		]]></Update>
    <Insert><![CDATA[   
			// Read only datasource
			return undefined;
		]]></Insert>
    <Delete><![CDATA[
			// Read only datasource
			return undefined;
		]]></Delete>
  </Database>
</DataSource>