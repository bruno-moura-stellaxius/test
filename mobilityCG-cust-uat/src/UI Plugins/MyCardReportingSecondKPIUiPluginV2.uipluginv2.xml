<UIPluginV2 name="MyCardReportingSecondKPIUiPluginV2">
  <Interface>
    <Property id="maximizedMode" />
    <Property id="mode" />
    <Property id="salesOrg" />
    <Property id="selectedDate" />
    <Property id="currentDate" />
    <Property id="avgVisitPerDay" />
    <Property id="avgPlannedVisitsPerDay" />
    <List id="salesData4">
      <Property id="value" />
      <Property id="target" />
    </List>
    <List id="salesData5">
      <Property id="value" />
      <Property id="target" />
    </List>
  </Interface>
  <Labels>
    <Label id="CardReportingSales_Currency" />
    <Label id="CardReportingKPI4FR_Title" /> 
    <Label id="CardReportingKPI5FR_Title" />
    <Label id="CardReportingKPI4SP_Title" /> 
    <Label id="CardReportingKPI5SP_Title" />
    <Label id="CardReportingKPI4_SubTitle" />
    <Label id="CardReportingKPI5_SubTitle" />
  </Labels>
  <Libraries>
    <Library name="C3JS" />
    <Library name="D3JS" />
  </Libraries>
  <UIComponentHTML name="UIComponentHTML"><![CDATA[
    <div class="WrappingContainer">
        <div id="Component_data4" class="ComponentContainer">
            <div id="TitleContainer_sales">
                <span id="Title_KPI4"></span>
                <span id="SubTitle_KPI4"></span>
            </div>
            <div id="ChartContainer_sales4" class="SalesChart">
                <div id="Chart_sales4"></div>
            </div>
        </div>
        <div id="Component_data5" class="ComponentContainer">
            <div>
                <span id="Title_KPI5"></span>
                <span id="SubTitle_KPI5"></span>
            </div>
            <div id="ChartContainer_sales5" class="SalesChart">
                <div id="Chart_sales5"></div>
            </div>
        </div>
    </div>
    ]]></UIComponentHTML>
  <UIComponentCSS name="UIComponentCSS"><![CDATA[
	
	/* overall wrapper class to remove scroll-bar */
	.WrappingContainer {
		overflow: hidden;
	}

    /* component wrapper class for layouting */
	.ComponentContainer {
		padding-top: 6px;
	}
	
	/* sales chart */
	.SalesChart {
		/*background-color: #FFFFFF;*/
	}

    .SalesChart .c3 line  {
    	display: none;
    }

    .SalesChart .c3-axis-x .domain {
        display: none;
    }

    .SalesChart .c3-axis-x-label {

    }

    /* ######################
      ###     FONTS      ###
      ###################### */

    @font-face {
      font-family: "Regular";
	  font-weight: 400;
      src: local("Arial");
    }

    @font-face {
      font-family: "Light";
	  font-weight: 300;
      src: local("Arial");
    }

    @font-face {
      font-family: "Medium";
	  font-weight: 500;
      src: local("Arial");
    }

    ]]></UIComponentCSS>
  <UIComponentJS name="UIComponentJS"><![CDATA[

let config_sales = {};

let chartReference_sales4;
let chartReference_sales5;

const selectors = {
    // sales
    component_data4: "#Component_data4",

    title_sales4: "#Title_KPI4",
    subtitle_sales4 : "#SubTitle_KPI4",

    chartContainer_sales4: "#ChartContainer_sales4",
    chart_sales4: "#Chart_sales4",

    component_data5: "#Component_data5",

    title_sales5: "#Title_KPI5",
    subtitle_sales5 : "#SubTitle_KPI5",

    chartContainer_sales5: "#ChartContainer_sales5",
    chart_sales5: "#Chart_sales5",

};

function connectCallback() {
    renderChart_sales4();
    renderChart_sales5();
}

function disconnectCallback() {
    if (PluginManager.helpers.isDefined(chartReference_sales4)) {
        chartReference_sales4.destroy();
    }
    if (PluginManager.helpers.isDefined(chartReference_sales5)) {
        chartReference_sales5.destroy();
    }
}

function renderCallback() {
    inputChanged_sales4();
    inputChanged_sales5();
}

/*############################
   ###    sales chart       ###
   ############################*/

function resize_sales(chart) {
    // get new size for sales, compare with current size and resize if required only
    var sizeJson = getSize_sales(chart);
    if (sizeJson.width !== config_sales.sizeJson.width || sizeJson.height !== config_sales.sizeJson.height) {
        chartReference_sales4.resize(sizeJson);
        chartReference_sales5.resize(sizeJson);
        config_sales.sizeJson = sizeJson;
    }
}

function setConfig_sales() {
    config_sales = {
        tickStyle: {
            font: PluginManager.pluginConfiguration.FontRegular10,
            color: PluginManager.pluginConfiguration.Color9,
        },
        titleStyle: {
            font: PluginManager.pluginConfiguration.FontMedium14,
            color: PluginManager.pluginConfiguration.Color9,
        },
        subTitleStyle: {
            font: PluginManager.pluginConfiguration.FontRegular12,
            color: PluginManager.pluginConfiguration.Color22,
            'padding-left': "10px",
        },
        barColors: [
            PluginManager.pluginConfiguration.Color4,
            PluginManager.pluginConfiguration.Color12,
        ],
        barLabelColors: [
            PluginManager.pluginConfiguration.Color9,
            PluginManager.pluginConfiguration.Color12,
        ],
    };
}

function changeBarLabelSize_sales() {
    // Set size of axis labels
    d3.select(".c3-texts-CY").selectAll("text").style("font", getLabelSize_sales());
    d3.select(".c3-texts-LY").selectAll("text").style("font", getLabelSize_sales());
}

function getLabelSize_sales() {
    if (PluginManager.deviceInfo.isWindows) {
        return PluginManager.pluginConfiguration.FontMedium14;
    } else {
        if (isMaximizedMode() &&
            !PluginManager.deviceInfo.isPhone
        ) {
            return PluginManager.pluginConfiguration.FontRegular12;
        } else {
            return PluginManager.pluginConfiguration.FontRegular10;
        }
    }
}

function changeMonthLabelSize_sales() {
    var svg = d3.select(selectors.chart_sales4);
    var text = svg.selectAll("text");
    text.style("font", PluginManager.pluginConfiguration.FontRegular10);
}

function inputChanged_sales4(existingJsonData) {

    var jsonData;
    if (PluginManager.helpers.isDefined(existingJsonData)) {
        jsonData = existingJsonData;
    } else {
        jsonData = prepareData_sales(PluginManager.salesData4.data);
    }

    var chart = chartReference_sales4;

    if (
        PluginManager.helpers.isDefined(chart) &&
        PluginManager.helpers.isDefined(chart.internal) &&
        PluginManager.helpers.isDefined(chart.internal.cache)
    ) {

        // resize sales chart on demand
        resize_sales("chart4");

        chart.load({
            columns: jsonData.data.columns,
            done: function () {
                changeBarLabelSize_sales();
                changeMonthLabelSize_sales();
            },
        });

        chart.axis.range(jsonData.axisRange);
        chart.focus();

        var chartDiv = d3.select(selectors.chart_sales4);
        var eventRect = chartDiv.selectAll(".c3-event-rect");

        eventRect.on("mouseout", function (elem) { });
    }
}

function inputChanged_sales5(existingJsonData) {

    var jsonData;
    if (PluginManager.helpers.isDefined(existingJsonData)) {
        jsonData = existingJsonData;
    } else {
        jsonData = prepareData_sales(PluginManager.salesData5.data);
    }

    var chart = chartReference_sales5;

    if (
        PluginManager.helpers.isDefined(chart) &&
        PluginManager.helpers.isDefined(chart.internal) &&
        PluginManager.helpers.isDefined(chart.internal.cache)
    ) {

        // resize sales chart on demand
        resize_sales("chart5");

        chart.load({
            columns: jsonData.data.columns,
            done: function () {
                changeBarLabelSize_sales();
                changeMonthLabelSize_sales();
            },
        });

        chart.axis.range(jsonData.axisRange);
        chart.focus();

        var chartDiv = d3.select(selectors.chart_sales5);
        var eventRect = chartDiv.selectAll(".c3-event-rect");

        eventRect.on("mouseout", function (elem) { });
    }
}

function renderChart_sales4() {
    // set config for sales chart
    setConfig_sales();
    // Workaround - render chart with null data in case of FR
    var jsonData;
    //C172 Average Visit per day (Cycle)
    if (PluginManager.helpers.isDefined(PluginManager.salesOrg) && PluginManager.salesOrg === "C172") { 
        jsonData = prepareData_sales(null);
    }
    else{
        jsonData = prepareData_sales(PluginManager.salesData4.data);
    }

    // Calculate dimensions of the chart
    var sizeJson = getSize_sales("chart4");
    config_sales.sizeJson = sizeJson;

    var getBarColor_sales = function (color, d) {
        return config_sales.barColors[(d.id && d.id == "LY") || d == "LY" ? 1 : 0];
    };

    var brandArray = jsonData.brands;

    //destroy chart object before setting new reference
    if (PluginManager.helpers.isDefined(chartReference_sales4)) {
        chartReference_sales4.destroy();
    }

    // Create Chart
    chartReference_sales4 = c3.generate({
        bindto: selectors.chart_sales4,

        data: {
            columns: [[], []],
            color: getBarColor_sales,
            type: "bar",
            labels: {
                format: function (v) {
                    return formatValue(v);
                }
            },
        },

        bar: {
            width: {
                ratio: 0.7,
            },
        },

        size: sizeJson,

        axis: {
            rotated: true,
            x: {
                type: "category",
                categories: brandArray,
                show: true,
            },
            y: {
                padding: {
                    top: 50,
                    bottom: 0,
                },
                show: false,
                max: 1000,
            },
        },
        grid: {
            x: {
                show: false,
            },
            y: {
                show: false,
            },
        },
        legend: {
            show: false,
        },
        tooltip: {
            show: false,
        },
    });

    var title, subtitle;
    if(PluginManager.helpers.isDefined(PluginManager.salesOrg) && PluginManager.salesOrg === "C172") { //C172
        title = PluginManager.locale.labels.CardReportingKPI4FR_Title;
        subtitle = "Value is - " + PluginManager.avgVisitPerDay;
    } else if (PluginManager.helpers.isDefined(PluginManager.salesOrg)) { //Other Countries
        title = PluginManager.locale.labels.CardReportingKPI4SP_Title;
    }

    if (isMaximizedMode()) {
        var component = document.getElementById(
            selectors.component_sales.substring(1)
        );
        styleElement(component, {
            "padding-left": "20px",
			"padding-right": "20px",
            //overflow: "auto"
        });

    }

    var titleElement = document.getElementById(selectors.title_sales4.substring(1));
    styleElement(titleElement, config_sales.titleStyle, title);

    var subtitleElement = document.getElementById(selectors.subtitle_sales4.substring(1));
    styleElement(subtitleElement, config_sales.titleStyle, subtitle);

    // call inputChanged to first set of data
    inputChanged_sales4(jsonData);
}

function renderChart_sales5() {
    // set config for sales chart
    setConfig_sales();

    // Workaround - render chart with null data in case of SP
    var jsonData;
    if (PluginManager.helpers.isDefined(PluginManager.salesOrg) && PluginManager.salesOrg === "C172") { //C172
        jsonData = prepareData_sales(PluginManager.salesData5.data);
    }else if (PluginManager.helpers.isDefined(PluginManager.salesOrg)) { //Other Countries
        jsonData = prepareData_sales(null);
    }

    // Calculate dimensions of the chart
    var sizeJson = getSize_sales("chart5");
    config_sales.sizeJson = sizeJson;

    var getBarColor_sales = function (color, d) {
        return config_sales.barColors[(d.id && d.id == "LY") || d == "LY" ? 1 : 0];
    };

    var brandArray = jsonData.brands;

    //destroy chart object before setting new reference
    if (PluginManager.helpers.isDefined(chartReference_sales5)) {
        chartReference_sales5.destroy();
    }

    // Create Chart
    chartReference_sales5 = c3.generate({
        bindto: selectors.chart_sales5,

        data: {
            columns: [[], []],
            color: getBarColor_sales,
            type: "bar",
            labels: {
                format: function (v) {
                    return formatValue(v);
                }
            },
        },

        bar: {
            width: {
                ratio: 0.7,
            },
        },

        size: sizeJson,

        axis: {
            rotated: true,
            x: {
                type: "category",
                categories: brandArray,
                show: true,
            },
            y: {
                padding: {
                    top: 50,
                    bottom: 0,
                },
                show: false,
                max: 1000,
            },
        },
        grid: {
            x: {
                show: false,
            },
            y: {
                show: false,
            },
        },
        legend: {
            show: false,
        },
        tooltip: {
            show: false,
        },
    });

    var title, subtitle;
    if(PluginManager.helpers.isDefined(PluginManager.salesOrg) && PluginManager.salesOrg === "C172") { //C172
        title = PluginManager.locale.labels.CardReportingKPI5FR_Title;
    } else if (PluginManager.helpers.isDefined(PluginManager.salesOrg)) { //Other Countries
        title = PluginManager.locale.labels.CardReportingKPI5SP_Title;
        subtitle = "Value is - " + PluginManager.avgPlannedVisitsPerDay;
    }

    if (isMaximizedMode()) {
        var component = document.getElementById(
            selectors.component_sales.substring(1)
        );
        styleElement(component, {
            "padding-left": "20px",
			"padding-right": "20px",
            //overflow: "auto"
        });

    }

    var titleElement = document.getElementById(selectors.title_sales5.substring(1));
    styleElement(titleElement, config_sales.titleStyle, title);

    var subtitleElement = document.getElementById(selectors.subtitle_sales5.substring(1));
    styleElement(subtitleElement, config_sales.titleStyle, subtitle);

    // call inputChanged to first set of data
    inputChanged_sales5(jsonData);
}

function getSize_sales(chart) {
    let sizeJson;
    var container = (chart == "chart4") ? selectors.chartContainer_sales4 : (chart == "chart5") ? selectors.chartContainer_sales5 : selectors.chartContainer_sales4;
    var d3Container = d3.select(container);

    if (PluginManager.helpers.isDefined(d3Container)) {
        //resize in case of orientation change
        if (isMaximizedMode()) {
            sizeJson = {
                width:
                    d3Container._groups[0][0].parentElement.parentElement.parentElement
                        .offsetWidth * 0.9,
                //hack: because card container is not rendered at this time height is not available ... uses width for calculating height
                height:
                    (d3Container._groups[0][0].parentElement.parentElement.parentElement
                        .offsetWidth *
                        0.75) /
                    3,
            };
        } else {
            sizeJson = {
                width:
                    d3Container._groups[0][0].parentElement.parentElement.parentElement
                        .offsetWidth * 0.96,
                //hack: because card container is not rendered at this time height is not available ... uses width for calculating height
                height:
                    d3Container._groups[0][0].parentElement.parentElement.parentElement
                        .offsetWidth * 0.44,
            };
        }
        // chart4 && C172 - chart5 && C078 
        /*if(chart == "chart4" && PluginManager.helpers.isDefined(PluginManager.salesOrg) && PluginManager.salesOrg === "C172"
        || chart == "chart5" && PluginManager.helpers.isDefined(PluginManager.salesOrg) && PluginManager.salesOrg === "C078"){ 
            sizeJson = {
                    width:
                    d3Container._groups[0][0].parentElement.parentElement.parentElement
                        .offsetWidth * 0.96,
                    height:10,
            };
        }*/
    }
    return sizeJson;
}

function prepareData_sales(loSalesData) {
    var brands = [];
    var value = [];
    var target = [];

    var maxValue1 = 0;
    var maxValue2 = 0;

    if (PluginManager.helpers.isDefined(loSalesData) && loSalesData.length > 0) {
        var items = loSalesData;

        for (var j = 0; j < items.length; j++) {
            value.push(items[j].value);
            target.push(items[j].target);
            if (PluginManager.helpers.isDefined(PluginManager.salesOrg) && PluginManager.salesOrg === "C172") {
                brands.push(items[j].brandName);
            }
            else{
                brands.push("Avg Visits");
            }
        }
        maxValue1 = value.reduce(function (p, v) {
            return p > v ? p : v;
        });
        maxValue2 = target.reduce(function (p, v) {
            return p > v ? p : v;
        });
    }

    maxValue1 = Math.max(maxValue1, maxValue2);

    var axisMax = Math.max(Math.ceil(maxValue1 * 1.1), 100);

    value = ["CY"].concat(value);
    target = ["LY"].concat(target);

    var jsonData = {
        brands: brands,
        data: {
            columns: [value, target],
        },
        axisRange: {
            max: {
                y: axisMax,
            },
        },
    };

    return jsonData;
}

/*
################################
#### element styling helper ####
################################ 
*/
function styleElement(element, styleDefinition, text) {
    if (PluginManager.helpers.isDefined(element) && PluginManager.helpers.isDefined(element.style) && PluginManager.helpers.isDefined(styleDefinition)) {
        // apply text
        if (PluginManager.helpers.isDefined(text)) {
            element.textContent = text;
        }
        // apply style
        Object.keys(styleDefinition).forEach((ele) => element.style.setProperty(ele, styleDefinition[ele]));
    }
}

function isMaximizedMode() {
    return (PluginManager.helpers.isDefined(PluginManager.maximizedMode) && PluginManager.maximizedMode == "1");
}

/* 
################################
custom value formatting using d3
################################ 
*/
let locale;

function setupLocale() {
    locale = d3.formatLocale(
        {
            "decimal": PluginManager.locale.formats.NumberFormats.DecimalSeparator.value,
            "thousands": PluginManager.locale.formats.NumberFormats.ThousandSeparator.value,
            "grouping": [3],
            "currency": [PluginManager.locale.labels.CardReportingSales_Currency, ""]
        }
    );
}

function formatValue(d) {
    if (!PluginManager.helpers.isDefined(locale)) {
        setupLocale();
    }
    return locale.format("$,")(d);
}

function formatGaugeChartValue(d) {
    if (!PluginManager.helpers.isDefined(locale)) {
        setupLocale();
    }
    return locale.format(",")(d) + "%";
}

    ]]></UIComponentJS>
</UIPluginV2>