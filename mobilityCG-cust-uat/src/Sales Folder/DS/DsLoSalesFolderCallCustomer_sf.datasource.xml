<DataSource name="DsLoSalesFolderCallCustomer" backendSystem="sf" businessObjectClass="LoSalesFolderCallCustomer" external="true" readOnly="true" distinct="true" schemaVersion="2.0">
  <Attributes>
    <DerivedAttribute name="customerName" value="CASE WHEN Account.Name IS NULL THEN '' ELSE Account.Name END" />
    <Attribute name="customerPKey" table="Sales_Folder__c" column="Account__c" />
    <Attribute name="mediaPath" table="SF_File" column="VersionData" />
    <DerivedAttribute name="fileType" value="' '" />
  </Attributes>
  <Database platform="SQLite">
    <Load><![CDATA[


  var customerPKey = "";
  var addCondSearch = "";
  var callDate = "";
  var callDateThru = "";

  if (Utils.isDefined(jsonQuery)) {
   var newParams = jsonQuery;
   if (Utils.isOldParamsFormat(newParams)) {
       newParams = Utils.convertDsParamsOldToNew(newParams);
   }
  }

   //############################
   //## Advanced Search Paging ##
   //############################  


   /** currentCustomerPKey */
   if (Utils.isDefined(newParams.currentCustomerPKey)){
       customerPKey =  Utils.convertForDBParam(newParams.currentCustomerPKey, "DomPKey"); 
   }

   /** customerPKey  */
   if (Utils.isDefined(newParams.customerPKey)){
       customerPKey =  Utils.convertForDBParam(newParams.customerPKey, "DomPKey"); 
   } 

   /**  DateFrom  */
   if (Utils.isDefined(newParams.callDate)){
       callDate =  Utils.convertForDBParam(newParams.callDate, "DomDate");
       addCondSearch += " AND Sales_Folder__c.Valid_From__c <= " + " #callDate# ";
   }

   /**  DateThru  */
   if (Utils.isDefined(newParams.callDateThru)){
       callDateThru =  Utils.convertForDBParam(newParams.callDateThru, "DomDate");
       addCondSearch += " AND Sales_Folder__c.Valid_Thru__c >= " + " #callDateThru# ";
   }

  var sqlParams = {customerPKey, callDate, callDateThru};


   //Get all the user roles for the current user
   var sqlStmt =       "WITH cte_userroles AS ( ";
   sqlStmt +=          "SELECT DISTINCT cpurm.User_Role_Name__c AS user_role ";
   sqlStmt +=          "FROM PermissionSetAssignment AS psa ";
   sqlStmt +=          "INNER JOIN SetupEntityAccess AS sea ON sea.ParentId = psa.PermissionSetId ";
   sqlStmt +=          "INNER JOIN Custom_Permission_User_Role_Mapping__c AS cpurm ";
   sqlStmt +=          "ON sea.SetupEntityId = cpurm.Custom_Permission__c ";
   sqlStmt +=          "WHERE psa.AssigneeId = '#UserPKey#' ), ";

   sqlStmt +=       " exclusionSF AS ( ";
   sqlStmt +=          "SELECT PolicyGroupMember__c.Account__c, Sales_Folder__c.Id AS salesfolderId FROM Sales_Folder__c ";
   sqlStmt +=          "INNER JOIN SalesFolderPolicyGroup__c ON Sales_Folder__c.Id = SalesFolderPolicyGroup__c.SalesFolder__c ";
   sqlStmt +=          "INNER JOIN PolicyGroup__c ON SalesFolderPolicyGroup__c.PolicyGroup__c = PolicyGroup__c.Id AND PolicyGroup__c.IsExclusion__c = '1' ";
   sqlStmt +=          "INNER JOIN PolicyGroupMember__c ON PolicyGroupMember__c.PolicyGroup__c = PolicyGroup__c.Id AND PolicyGroupMember__c.Account__c = '#customerPKey#' ) ";

   //Get salesfolder details for selected salesfolders
   sqlStmt +=          "SELECT Sales_Folder__c.Id as pKey, Sales_Folder__c.Name as id, ";
   sqlStmt +=          "Sales_Folder__c.Description__c as sloganText, ";
   sqlStmt +=          "CASE Sales_Folder__c.Internal__c WHEN '1' THEN 'MyLockIcon' ELSE '' END as internal, Sales_Folder__c.Language__c as language, Sales_Folder__c.ContentCategory__c as contentCategory, ";
   sqlStmt +=          "Sales_Folder__c.Valid_From__c as dateFrom, Sales_Folder__c.Valid_Thru__c as dateThru, Sales_Folder_Template__c.Description__c as metaText, ";
   sqlStmt +=          "Sales_Folder__c.LastModifiedDate as businessModified, ";
   sqlStmt +=          "(strftime('%d/%m/%Y', date(Sales_Folder__c.Valid_From__c, 'unixepoch', 'localtime')) || ' - ' || strftime('%d/%m/%Y', date(Sales_Folder__c.Valid_Thru__c, 'unixepoch', 'localtime'))) as myDateRange,";
   sqlStmt +=  		     "file.VersionData AS mediaPath, ";
   sqlStmt +=  		     "file.Id AS attachmentBlobPKey, ";
   sqlStmt +=  	 	     "replace(file.PathOnClient, rtrim(file.PathOnClient, replace(file.PathOnClient, '.', '')), '') As fileType, ";
   sqlStmt +=  	 	     "PolicyGroupMember__c.Account__c ";
   sqlStmt +=          "FROM Sales_Folder__c ";
   sqlStmt +=          "LEFT OUTER JOIN ";
   sqlStmt +=          "(SF_FileLink ";
   sqlStmt +=          "JOIN SF_File as file ON SF_FileLink.FileId = file.Id ";
   sqlStmt +=          "AND file.Usage__c = 'Icon' ";
   sqlStmt +=          "AND NOT EXISTS (SELECT file2.Id FROM SF_File as file2, SF_FileLink as filelink2 WHERE filelink2.FileId=file2.Id AND file2.Usage__c = 'Icon' AND file2.CreatedDate > file.CreatedDate AND SF_FileLink.ParentId = filelink2.ParentId) ";
   sqlStmt +=          ") ON Sales_Folder__c.Id = SF_FileLink.ParentId ";

   sqlStmt +=          "JOIN Sales_Folder_Template__c ON Sales_Folder_Template__c.Id = Sales_Folder__c.Sales_Folder_Template__c ";
   sqlStmt +=          "LEFT JOIN SalesFolderPolicyGroup__c ON Sales_Folder__c.Id = SalesFolderPolicyGroup__c.SalesFolder__c ";
   sqlStmt +=          "LEFT JOIN PolicyGroupMember__c ON PolicyGroupMember__c.PolicyGroup__c = SalesFolderPolicyGroup__c.PolicyGroup__c ";
   sqlStmt +=          "LEFT JOIN PolicyGroup__c ON SalesFolderPolicyGroup__c.PolicyGroup__c = PolicyGroup__c.Id ";
   sqlStmt +=          "LEFT JOIN Flatten_Account_Hierarchy__c FAH ON FAH.Account__c = '#customerPKey#' ";
   sqlStmt +=          "WHERE Sales_Folder__c.Sales_Org__c = '#SALESORG#' AND Sales_Folder_Template__c.Sales_Org__c = '#SALESORG#' AND Sales_Folder__c.Active__c='1' ";
   sqlStmt +=          addCondSearch;

  sqlStmt += " AND ( ";
  sqlStmt += "      Sales_Folder__c.SalesOrgWide__c = '1' ";
  sqlStmt += "      OR ( ";
  sqlStmt += "          Sales_Folder__c.SalesOrgWide__c = '0' ";
  sqlStmt += "          AND PolicyGroup__c.IsApplicableToHierarchy__c = '0' AND PolicyGroup__c.IsExclusion__c = '0' AND PolicyGroupMember__c.Account__c = '#customerPKey#'";
  sqlStmt += "      )";
  sqlStmt += "      OR ( ";
  sqlStmt += "          Sales_Folder__c.SalesOrgWide__c = '0' ";
  sqlStmt += "          AND PolicyGroup__c.IsApplicableToHierarchy__c = '1' AND PolicyGroup__c.IsExclusion__c = '0' ";
  sqlStmt += "          AND ( PolicyGroupMember__c.Account__c = '#customerPKey#' ";
  sqlStmt += "          OR PolicyGroupMember__c.Account__c = FAH.Account_Level_01__c OR PolicyGroupMember__c.Account__c = FAH.Account_Level_02__c ";
  sqlStmt += "          OR PolicyGroupMember__c.Account__c = FAH.Account_Level_03__c OR PolicyGroupMember__c.Account__c = FAH.Account_Level_04__c ";
  sqlStmt += "          OR PolicyGroupMember__c.Account__c = FAH.Account_Level_05__c OR PolicyGroupMember__c.Account__c = FAH.Account_Level_06__c ";
  sqlStmt += "          OR PolicyGroupMember__c.Account__c = FAH.Account_Level_07__c OR PolicyGroupMember__c.Account__c = FAH.Account_Level_08__c ) ";
  sqlStmt += "      )";
  sqlStmt += "  )";

  sqlStmt +=          "AND NOT EXISTS ( ";
   sqlStmt +=          "SELECT 1 ";
   sqlStmt +=          "FROM exclusionSF "; 
   sqlStmt +=          " WHERE exclusionSF.salesfolderId = Sales_Folder__c.Id ) ";

   sqlStmt +=          "AND EXISTS ( ";
   sqlStmt +=          "SELECT 1 ";
   sqlStmt +=          "FROM cte_userroles AS ur "; 
   sqlStmt +=          "WHERE ';' || sales_folder__c.userRoles__c || ';' LIKE '%;' || ur.user_role || ';%' ) ";

   sqlStmt +=          "GROUP BY pKey ";
   sqlStmt +=          "ORDER BY ";
   sqlStmt +=          "Sales_Folder_Template__c.Description_#Language#__c ASC, "; 
   sqlStmt +=          "Sales_Folder__c.Description_#Language#__c ASC ";
   sqlStmt +=          "LIMIT 5";

   return Utils.replaceMacrosParam(sqlStmt, sqlParams);

  ]]></Load>
    <Update><![CDATA[
   // Read only datasource
   return undefined;
  ]]></Update>
    <Insert><![CDATA[   
   // Read only datasource
   return undefined;
  ]]></Insert>
    <Delete><![CDATA[
   // Read only datasource
   return undefined;
  ]]></Delete>
  </Database>
</DataSource>