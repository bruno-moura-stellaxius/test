<DataSource name="DsLoMyPricingTermProductsInfo" backendSystem="sf" businessObjectClass="LoMyPricingTermProductsInfo" external="true" schemaVersion="2.0">
<Database platform="SQLite">
    <Load><![CDATA[
  var orderMetaName = "";
  var pricingTermId = "";
  if (Utils.isDefined(jsonQuery.orderMetaName)) {
  	orderMetaName = Utils.convertForDBParam(jsonQuery.orderMetaName, "DomText");
  }
  if (Utils.isDefined(jsonQuery.pricingTermId)) {
    pricingTermId = Utils.convertForDBParam(jsonQuery.pricingTermId, "DomPKey");
  }

  var sqlParams = {orderMetaName, pricingTermId};

  var sqlStmt = "SELECT "; 
  sqlStmt += " pricingTerm.Id as pricingTermPKey ";
  sqlStmt += ", pricingTerm.DateThru__c as pricingTermEndDate ";
  sqlStmt += ", pricingTerm.DateFrom__c as pricingTermStartDate ";
  sqlStmt += ", pricingCondition.Id as pricingConditionPKey ";
  sqlStmt += ", conditionProduct.Id as conditionProductPKey ";
  sqlStmt += ", pricingTerm.Name as pricingTermName ";
  sqlStmt += ", pricingCondition.Name as pricingConditionName ";
  sqlStmt += ", conditionProduct.Name as conditionProductName ";
  sqlStmt += ", pricingCondition.Layer__c as layer ";
  sqlStmt += ", pricingCondition.TypeOfDiscount__c as typeOfDiscount ";
  sqlStmt += ", pricingCondition.BaseDiscount__c as baseDiscount ";
  sqlStmt += ", pricingCondition.LayerAThresholdType__c as layerAThresholdType ";
  sqlStmt += ", pricingCondition.MaxQty__c as maxQty ";
  sqlStmt += ", pricingCondition.MinQty__c as minQty ";
  sqlStmt += ", pricingCondition.MaxValue__c as maxValue ";
  sqlStmt += ", pricingCondition.MinValue__c as minValue ";
  sqlStmt += ", pricingCondition.MaxBrands__c as maxBrands ";
  sqlStmt += ", pricingCondition.MinBrands__c as minBrands ";
  sqlStmt += ", pricingCondition.MaxRef__c as maxRef ";
  sqlStmt += ", pricingCondition.MinRef__c as minRef ";
  sqlStmt += ", pricingCondition.MinPercentBeforeMaxDeliveryDate__c as minPercentBeforeMaxDeliveryDate ";
  sqlStmt += ", pricingCondition.MaxDeliveryDate__c	 as maxDeliveryDate ";
  sqlStmt += ", DiscountPercent__c as discountPercent ";
  sqlStmt += ", CASE WHEN  conditionProductRecordType.Name  IS 'Application' THEN conditionProduct.Product__c ELSE null END AS application ";
  sqlStmt += ", CASE WHEN  conditionProductRecordType.Name  IS 'Scope' THEN conditionProduct.Product__c ELSE null END AS scope ";
  sqlStmt += ", CASE WHEN  conditionProductRecordType.Name  IS 'Mandatory' THEN conditionProduct.Product__c ELSE null END AS mandatory ";
  sqlStmt += ", conditionProduct.Max__c as conditionProductMax ";
  sqlStmt += ", conditionProduct.Min__c as conditionProductMin ";
  sqlStmt += ", conditionProduct.Product__c as conditionProductReferred ";
  sqlStmt += ", pricingCondition.FreeGoodProductCode__c as freeGoodProduct ";
  sqlStmt += ", pricingCondition.FreeGoodQtyToGive__c as freeGoodQty ";
  sqlStmt += ", pricingCondition.TypeOfDiscount__c as typeOfDiscount ";
  sqlStmt += ", pricingCondition.QtyToBuy__c as qtyToBuy ";
  sqlStmt += ", pricingCondition.QtyToGive__c as qtyToGive ";
  sqlStmt += ", pricingCondition.MaxAuthorizedDiscountPercent__c AS maxDiscountPercent ";
  sqlStmt += ", pricingCondition.MinAuthorizedDiscount__c	 AS minDiscountPercent ";
  sqlStmt += ", pricingCondition.BehaviorIfHigherDiscount__c AS behaviourIfHigherDiscount ";
  sqlStmt += ", pricingCondition.Message__c AS errorMsg ";
  sqlStmt += " FROM PricingTerm__c as pricingTerm ";
  sqlStmt += " inner join PricingCondition__c as pricingCondition on pricingCondition.PricingTerm__c = pricingTerm.Id ";
  sqlStmt += " inner join ConditionProduct__c as conditionProduct on conditionProduct.PricingCondition__c = pricingCondition.Id ";
  sqlStmt += " inner join RecordType as conditionProductRecordType on conditionProduct.RecordTypeId = conditionProductRecordType.Id ";

  if(orderMetaName == 'Cycle'){
  sqlStmt += " where pricingTerm.Id = ";
  sqlStmt += " ( Select PricingTerm__c.Id from PricingTerm__c ";
  sqlStmt += " inner join RecordType as pricingTermRecordType on PricingTerm__c.RecordTypeId = pricingTermRecordType.Id ";
  sqlStmt += " where pricingTermRecordType.Name = 'Cycle' ";
  sqlStmt += " AND Status__c = 'Active' ";
  sqlStmt += " AND #compareAsDate('PricingTerm__c.DateFrom__c', 'Date', '<=', #TodayAsDate# , 'Date')# ";
  sqlStmt += " AND #compareAsDate('PricingTerm__c.DateThru__c', 'Date', '>=', #TodayAsDate# , 'Date')# ";
  sqlStmt += " order by PricingTerm__c.DateFrom__c desc ";
  sqlStmt += " Limit 1 )";
  }
  if(orderMetaName == 'PreSales'){
  sqlStmt += " where pricingTerm.Id = #pricingTermId# ";
  sqlStmt += " AND pricingTerm.Status__c = 'Active' ";
  sqlStmt += " AND #compareAsDate('pricingTerm.DateFrom__c', 'Date', '<=', #TodayAsDate# , 'Date')# ";
  sqlStmt += " AND #compareAsDate('pricingTerm.DateThru__c', 'Date', '>=', #TodayAsDate# , 'Date')# ";
  }
  sqlStmt += " AND #compareAsDate('pricingCondition.ValidFrom__c', 'Date', '<=', #TodayAsDate# , 'Date')# ";
  sqlStmt += " AND #compareAsDate('pricingCondition.ValidUntil__c', 'Date', '>=', #TodayAsDate# , 'Date')# ";
  

	return Utils.replaceMacrosParam(sqlStmt, sqlParams);

   ]]></Load>
    <Update><![CDATA[
      // Intended to be empty - Overview list => read only!
      return undefined;
   ]]></Update>
    <Insert><![CDATA[
      // Intended to be empty - Overview list => read only!
      return undefined;     
   ]]></Insert>
    <Delete><![CDATA[
      // Intended to be empty - Overview list => read only!
      return undefined;
   ]]></Delete>
  </Database>
</DataSource>