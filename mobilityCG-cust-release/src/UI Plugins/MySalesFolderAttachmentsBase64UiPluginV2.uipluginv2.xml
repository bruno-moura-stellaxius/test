<UIPluginV2 name="MySalesFolderAttachmentsBase64UiPluginV2">
  <Interface>
      <Property id="type" />
      <Property id="pKey" />
      <List id="loBase64">
          <Property id="pKey" />
          <Property id="base64" />
          <Property id="contentDocumentId" />
      </List>
      <List id="attachments">
          <Property id="pKey" />
          <Property id="contentDocumentId" />
      </List>
      <List id="actions">
          <Property id="pKey" />
      </List>
      <Events>
          <Event name="openLink" />
          <Event name="openDocument" />
          <Event name="openOrder" />
       </Events>
  </Interface>
  <Libraries>
  </Libraries>
  <UIComponentHTML name="UIComponentHTML"><![CDATA[
<div class="WrappingContainer">
  <div id="Component_attachments" class="ComponentContainer">
      <div id="imageListContainer"></div>
  </div>
</div>
<svg id="link-icon" style="display: none" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-external-link"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg>
<svg id="document-icon" style="display: none" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-file"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>
<svg id="order-icon" style="display: none" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-shopping-cart"><circle cx="9" cy="21" r="1"></circle><circle cx="20" cy="21" r="1"></circle><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path></svg>

      ]]></UIComponentHTML>
  <UIComponentCSS name="UIComponentCSS"><![CDATA[
    *,
    *:after,
    *:before {
      box-sizing: border-box;
    }
    
    body {
          font-family: system-ui, "Regular", sans-serif;
    }

    .menu {
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 20px 20px #40404015;
      backdrop-filter: blur(20px);
      background-color: rgba(255, 255, 255, 0.75);
    }

    .menu-list {
      margin: 0;
      display: block;
      width: 100%;
      padding: 8px;
    }

    .menu-list + .menu-list {
      border-top: 1px solid #ddd;
    }

    .menu-item {
      position: relative;
      border-bottom: 1px solid #ccc;
    }

    .menu-list .menu-item:last-of-type {
      border: none;
    }
    
    .menu-button {
      font: inherit;
      border: 0;
      padding: 8px 8px;
      padding-right: 36px;
      width: 100%;
      border-radius: 8px;
      display: flex;
      align-items: center;
      position: relative;
      background-color: transparent;
    }

    .menu-container {
      position: fixed;
      width: 250px;
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 10000;
    }
    
    .menu-container.visible {
        display: block;
    }

    ul {
      list-style: none;
    } 

    .dynamic-image {
      width: 100%
    }

    .menu-button svg {
      width: 20px;
      height: 20px;
      margin-right: 10px;
    }
          ]]></UIComponentCSS>
  <UIComponentJS name="UIComponentJS"><![CDATA[
   
var timer;
var touchduration = 500;

function connectCallback() {
document.body.style.webkitTouchCallout = "none";
document.body.style.webkitUserSelect = "none";
document.body.style.userSelect = "none";
document.addEventListener("contextmenu", (event) => {
  event.preventDefault();
});
renderAttachments();
}

function renderCallback() {
renderAttachments();
}

function renderAttachments() {
var items = PluginManager.loBase64.data;
var attachments = PluginManager.attachments.data;
let contextMenus = [];

var imageListContainer = document.getElementById("imageListContainer");
imageListContainer.innerHTML = "";

attachments.forEach((attachment) => {

  const src = getImgByContentDocument(attachment.contentDocumentId);

  const imageContainer = document.createElement("div");
  imageContainer.className = "image-container";

  const img = document.createElement("img");
  img.src = "data:image/jpg;base64, " + src.base64;
  img.className = "dynamic-image";
  img.id = src.pKey;
  img.alt = src.contentDocumentId;

  const actions = getActions(attachment.myActionHeader);
  if (actions.length > 0) {
    const actionsMenu = document.createElement("div");
    actionsMenu.id = src.contentDocumentId;
    actionsMenu.className = "menu-container";
    const actionsMenuDiv = document.createElement("div");
    actionsMenuDiv.className = "menu";
    const menuList = document.createElement("ul");
    menuList.className = "menu-list";
    actions.forEach((action) => {
      const actionItemLi = document.createElement("li");
      actionItemLi.className = "menu-item";
      const actionItemButton = document.createElement("button");
      actionItemButton.className = "menu-button";
      
      if (action.redirectionType == "Link") {
        const linkIconTemplate = document.getElementById("link-icon");
        let linkIcon = linkIconTemplate.cloneNode(true);
        linkIcon.style.display = 'block';
        actionItemButton.appendChild(linkIcon);
        actionItemLi.dataset["target"] = action.link;
        actionItemLi.onclick = function (event) {
          event.preventDefault();
          PluginManager.throwEvent("openLink", {
            url: action.link,
          });
        };
      } else if (action.redirectionType == "Document") {
        const documentIconTemplate = document.getElementById("document-icon");
        let documentIcon = documentIconTemplate.cloneNode(true);
        documentIcon.style.display = 'block';
        actionItemButton.appendChild(documentIcon);
        actionItemLi.dataset["target"] = action.documentExternalId;
        actionItemLi.onclick = function (event) {
          event.preventDefault();
          PluginManager.throwEvent("openDocument", {
            documentExternalId: action.documentExternalId,
          });
        };
      } else if (action.redirectionType == "Order") {
        const orderIconTemplate = document.getElementById("order-icon");
        let orderIcon = orderIconTemplate.cloneNode(true);
        orderIcon.style.display = 'block';
        actionItemButton.appendChild(orderIcon);
        actionItemLi.dataset["target"] = action.productAssortment;
        actionItemLi.onclick = function (event) {
          event.preventDefault();
          PluginManager.throwEvent("openOrder", {
            productAssortment: action.productAssortment,
          });
        };
      }
      const actionLabel = document.createTextNode(action.label);
      actionItemButton.appendChild(actionLabel);
      actionItemLi.appendChild(actionItemButton);
      menuList.appendChild(actionItemLi);
      actionsMenuDiv.appendChild(menuList);
      actionsMenu.appendChild(actionsMenuDiv);
    });
    contextMenus.push(actionsMenu);
    imageContainer.appendChild(actionsMenu);

    let onlongtouch = function (event) {
      timer = null;
      actionsMenu.classList.add("visible");
      var contextMenuWidth = 250;
      var leftPos = ''
      if (event.touches[0].clientX < window.innerWidth - contextMenuWidth) {
        leftPos = event.touches[0].clientX + "px";
      } else {
        leftPos = (event.touches[0].clientX - contextMenuWidth) + "px";
      }

      var topPos = ''
      var contextMenuHeight = actions.length * 50;
      if (event.touches[0].clientY < window.innerHeight - contextMenuHeight) {
        topPos = event.touches[0].clientY + "px";
      } else {
        topPos = (event.touches[0].clientY - contextMenuHeight) + "px";
      }
      actionsMenu.style.left = leftPos;
      actionsMenu.style.top = topPos;
    };
    img.addEventListener(
      "touchstart",
      function touchstart(e) {
        if (!timer) {
          timer = setTimeout(onlongtouch, touchduration, e);
        }
        contextMenus.forEach((ctxMenu) => {
          ctxMenu.classList.remove("visible");
        });
      },
      false
    );
    img.addEventListener("touchend", touchend, false);
    img.addEventListener("touchmove", touchmove, false);
  } else {
    img.addEventListener(
      "touchstart",
      function touchstart(e) {
        contextMenus.forEach((ctxMenu) => {
          ctxMenu.classList.remove("visible");
        });
      },
      false
    );
  }
  imageContainer.appendChild(img);
  imageListContainer.appendChild(imageContainer);
});

function touchend() {
  if (timer) {
    clearTimeout(timer);
    timer = null;
  }
}

function touchmove() {
  clearTimeout(timer);
  timer = null;
}

function getActions(headerId) {
  const sourceActions = PluginManager.actions.data;
  let actions = [];

  sourceActions.forEach((srcAction) => {
    if (srcAction.prmHeaderPKey === headerId) {
      actions.push(srcAction);
    }
  });
  return actions;
}

function getImgByContentDocument(contentDocumentId) {
  const base64List = PluginManager.loBase64.data;
  let base64Attachment;
  base64List.forEach((base64) => {
    if (base64.contentDocumentId === contentDocumentId) {
      base64Attachment = base64;
    }
  });
  return base64Attachment;
}
}
    
]]></UIComponentJS>
</UIPluginV2>