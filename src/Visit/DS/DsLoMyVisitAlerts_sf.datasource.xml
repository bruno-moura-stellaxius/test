<Datasource name="DsLoMyVisitAlerts" objectClass="LoMyVisitAlerts" backendSystem="sf" external="true" schemaVersion="2.0">
  <Attributes>
	  <Attribute name="pKey" />
    <Attribute name="customerName" />
    <Attribute name="customerCode" />
    <Attribute name="abcClass" />
    <Attribute name="lastVisitDate" />
    <Attribute name="alertType" />
    <Attribute name="dateFrom" table="Visit" column="PlannedVisitStartTime" />
    <Attribute name="timeFrom" table="Visit" column="PlannedVisitStartTime" />
    <Attribute name="dateThru" table="Visit" column="PlannedVisitEndTime" />
    <Attribute name="timeThru" table="Visit" column="PlannedVisitEndTime" />
    <Attribute name="clbStatus" table="Visit" column="Status" />
    <Attribute name="myActualStatus" table="Visit" column="ActualStatus__c" /> 
    <Attribute name="myVisitPerformance" table="Account" column="VisitPerformance__c" /> 
    <DerivedAttribute name="myVisitPerformanceIcon" value="CASE WHEN Account.VisitPerformance__c LIKE '%/resource/RedImage%' THEN 'MySmallSquareRed' WHEN Account.VisitPerformance__c LIKE '%/resource/GreenImage%' THEN 'MySmallSquareGreen' ELSE 'EmptyImage' END" />
    <Attribute name="nextVisitDate" />
  </Attributes>
  <Entities>
    <Entity name="Visit" alias="" idAttribute="Id" />
  </Entities>
  <Database platform="SQLite">
    <Load><![CDATA[
            var alertType = "";
            var abcClass = "";
            var currentDate = Utils.convertForDBParam(Utils.convertDate2Ansi(Utils.createDateToday()), 'DomDate');
            var minDate = Utils.convertForDBParam(Utils.convertDate2Ansi(Utils.getMinDate()), 'DomDate');
            if(Utils.isDefined(jsonQuery)){
              var newParams = jsonQuery;
              if (Utils.isOldParamsFormat(newParams)){
              newParams = Utils.convertDsParamsOldToNew(newParams);
              }
            }
            var addCondSearch = "";
            /**  alertType  **/
            if (Utils.isDefined(newParams.alertType)){
              alertType = Utils.convertForDBParam(newParams.alertType, "DomText");
              addCondSearch += " AND alertType " + Utils.replaceOperator(newParams.alertTypeComp) + "#alertType# ";
            }
            if (Utils.isDefined(newParams.abcClass)){
              abcClass = Utils.convertForDBParam(newParams.abcClass, "DomText");
              addCondSearch += " AND abcClass " + Utils.replaceOperator(newParams.abcClassComp) + "#abcClass# ";
            }
            var sqlParams = {alertType,abcClass,currentDate,minDate};
            //Unplanned, Unfinished and Overdue Visit.PlannedVisitStartTime

            var sqlStmt = "SELECT ";
            sqlStmt+= "Visit.Id as pKey, ";
            sqlStmt+= "Account.Name as customerName, ";
            sqlStmt+= "Account.Account_Number__c as customerCode, ";
            sqlStmt+= "Account.ABCClass__c as abcClass, ";
            sqlStmt+= "Account.LastVisitDate__c as lastVisitDate, ";
            sqlStmt+=" CASE ";
            sqlStmt+="  WHEN Visit.PlannedVisitStartTime < '#currentDate#' THEN 'Overdue' ";
            sqlStmt+="  ELSE 'Other' "
            sqlStmt+=" END AS alertType, "
            sqlStmt+= " #dateAsUnixepochLocaltime('Visit.PlannedVisitStartTime')# AS dateFrom, ";
            sqlStmt+= " Visit.PlannedVisitStartTime AS timeFrom, ";
            sqlStmt+= " #dateAsUnixepochLocaltime('Visit.PlannedVisitEndTime')# AS dateThru, ";
            sqlStmt+= " Visit.PlannedVisitEndTime AS timeThru, ";
            sqlStmt+= " Visit.Status AS clbStatus ,";
            sqlStmt+= " Visit.ActualStatus__c AS myActualStatus, ";
            sqlStmt+= " Account.VisitPerformance__c AS myVisitPerformance, ";
            sqlStmt+= " CASE WHEN Account.VisitPerformance__c LIKE '%/resource/RedImage%' THEN 'MySmallSquareRed' WHEN Account.VisitPerformance__c LIKE '%/resource/GreenImage%' THEN 'MySmallSquareGreen' ELSE 'EmptyImage' END AS myVisitPerformanceIcon, ";
            sqlStmt+= " COALESCE( ( SELECT MIN(v2.PlannedVisitStartTime) FROM Visit v2 WHERE v2.AccountId = Visit.AccountId AND v2.PlannedVisitStartTime > '#currentDate#' ), '1700-01-01' ) AS nextVisitDate ";
            sqlStmt+= "from Visit JOIN Account on Visit.AccountId = Account.Id ";
            sqlStmt+= "WHERE (Visit.Status IN ('Planned', 'Suggested') AND Visit.PlannedVisitStartTime < '#currentDate#' AND Visit.VisitStartDate__c = '#minDate#' ) ";
            sqlStmt+= addCondSearch;
            sqlStmt+=" ORDER BY Visit.PlannedVisitStartTime DESC";
            return Utils.replaceMacrosParam(sqlStmt, sqlParams);

		]]></Load>
    <Update><![CDATA[
			// Intended to be empty
			return undefined;
		]]></Update>
    <Insert><![CDATA[   
			// Intended to be empty     
			return undefined;           
		]]></Insert>
    <Delete><![CDATA[
			// Intended to be empty
			return undefined;  
		]]></Delete>
  </Database>
</Datasource>